<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一蓑烟雨任平生.</title>
  
  <subtitle>stay hungry , stay foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-21T16:10:08.779Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>李瑞恒</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>何为HTML5</title>
    <link href="http://yoursite.com/2019/05/21/%E4%BD%95%E4%B8%BAHTML5/"/>
    <id>http://yoursite.com/2019/05/21/何为HTML5/</id>
    <published>2019-05-21T15:57:55.000Z</published>
    <updated>2019-05-21T16:10:08.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><p>HTML5 是一个<strong>标准</strong>，而不是一项技术。</p><p>标准即为大家遵守的准则，你可以按照标准做，甚至已更加严格标准要求自己。也可以不按照准则，像IE6那样，这样就没人和你玩了。</p><p>我们要么作为理论派讨论HTML5标准，或是作为实际派讨论HTML5标准在某浏览器中的应用。</p><p>但是实际上，人们口中的H5，并不是指标准或标准的应用，而是被硬生生造出来的奇怪概念的混合集。</p><p>甲方口中的H5，其实就是指那种炫酷的小界面。拆分出来有如下技术的点。</p><ul><li><p>页面素材预加载技术。</p></li><li><p>音乐加载播放技术。</p></li><li><p>支持滑动的界面。</p></li><li><p>可以涂鸦。</p></li><li><p>动态文字图片。</p></li><li><p>填表报名。</p></li><li><p>支持分享自定义文案和图片。</p></li><li><p>…</p></li></ul><p>所以我们在谈论H5时，实际上是一个<strong>解决方案</strong>，一个酷炫的移动端onpage网站的解决方案。</p><p>从某种程度上说，H5其实就是微信上的PPT。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML5&quot;&gt;&lt;a href=&quot;#HTML5&quot; class=&quot;headerlink&quot; title=&quot;HTML5&quot;&gt;&lt;/a&gt;HTML5&lt;/h1&gt;&lt;p&gt;HTML5 是一个&lt;strong&gt;标准&lt;/strong&gt;，而不是一项技术。&lt;/p&gt;
&lt;p&gt;标准即为大家遵守的准则，你
      
    
    </summary>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>何为Vuex</title>
    <link href="http://yoursite.com/2019/05/21/vue-vuex/"/>
    <id>http://yoursite.com/2019/05/21/vue-vuex/</id>
    <published>2019-05-20T17:07:57.000Z</published>
    <updated>2019-05-20T17:11:10.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。</p><p>以一个全局单例管理组件的共享状态</p><p>通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性</p><p><img src="https://raw.githubusercontent.com/bpgg/bpgg.github.io/master/img/vuex.png" alt="vuex"></p><p>特点：</p><ul><li><strong>单向数据流</strong></li></ul><h2 id="什么情况下使用-Vuex"><a href="#什么情况下使用-Vuex" class="headerlink" title="什么情况下使用 Vuex"></a>什么情况下使用 Vuex</h2><p>Vuex 可以帮助我们管理共享状态，并附带了更多的概念和框架。这需要对短期和长期效益进行权衡。</p><ul><li>应用简单，不推荐使用。</li><li>中大型单页应用推荐使用。</li></ul><h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a><strong>核心概念</strong></h1><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><h3 id="单一状态树"><a href="#单一状态树" class="headerlink" title="单一状态树"></a>单一状态树</h3><p>Vuex 使用<strong>单一状态树</strong>，一个对象包含全部的应用级状态（<code>SSOT</code>）。</p><h3 id="在组件中获取-Vuex-状态"><a href="#在组件中获取-Vuex-状态" class="headerlink" title="在组件中获取 Vuex 状态"></a>在组件中获取 Vuex 状态</h3><p>Vuex 通过 <code>store</code> 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 <code>this.$store</code> 访问到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  <span class="comment">// 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</span></span><br><span class="line">  store,</span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="app"&gt;</span></span><br><span class="line"><span class="string">      &lt;counter&gt;&lt;/counter&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="mapState-状态函数"><a href="#mapState-状态函数" class="headerlink" title="mapState 状态函数"></a>mapState 状态函数</h3><p>获取多个状态，声明多个计算属性出现重复和冗余。</p><p>mapState 可以辅助生成计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  computed: mapState(&#123;</span><br><span class="line">    <span class="comment">// 箭头函数可使代码更简练</span></span><br><span class="line">    count: <span class="function"><span class="params">state</span> =&gt;</span> state.count,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传字符串参数 'count' 等同于 `state =&gt; state.count`</span></span><br><span class="line">    countAlias: <span class="string">'count'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></span><br><span class="line">    countPlusLocalState (state) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count + <span class="keyword">this</span>.localCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射的计算属性和 state 的子节点名称相同时，可以给 mapState 传递字符串数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">computed: mapState([</span><br><span class="line">  <span class="comment">// 映射 this.count 为 store.state.count</span></span><br><span class="line">  <span class="string">'count'</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><h2 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h2><p>从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数：</p><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'...'</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'...'</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doneTodos: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="通过属性访问"><a href="#通过属性访问" class="headerlink" title="通过属性访问"></a>通过属性访问</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.getters.doneTodos</span><br></pre></td></tr></table></figure><ul><li>Getter 也可以接受其他 getter 作为第二个参数：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  doneTodosCount: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getters.doneTodos.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">store.getters.doneTodosCount <span class="comment">// -&gt; 1</span></span><br></pre></td></tr></table></figure><ul><li>在任何组件中使用它：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  doneTodosCount () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.doneTodosCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过方法访问"><a href="#通过方法访问" class="headerlink" title="通过方法访问"></a>通过方法访问</h3><p>让 getter 返回一个函数，来实现给 getter 传参。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  getTodoById: <span class="function">(<span class="params">state</span>) =&gt;</span> (id) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> state.todos.find(<span class="function"><span class="params">todo</span> =&gt;</span> todo.id === id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">store.getters.getTodoById(<span class="number">2</span>) <span class="comment">// -&gt; &#123; id: 2, text: '...', done: false &#125;</span></span><br></pre></td></tr></table></figure><h3 id="mapGetter-辅助函数"><a href="#mapGetter-辅助函数" class="headerlink" title="mapGetter 辅助函数"></a>mapGetter 辅助函数</h3><p><code>mapGetter</code> 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">  <span class="comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class="line">    ...mapGetters([</span><br><span class="line">      <span class="string">'doneTodosCount'</span>,</span><br><span class="line">      <span class="string">'anotherGetter'</span>,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getter 属性更改名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mapGetters(&#123;</span><br><span class="line">  <span class="comment">// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span></span><br><span class="line">  doneCount: <span class="string">'doneTodosCount'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// 变更状态</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="提交载荷-（playload）"><a href="#提交载荷-（playload）" class="headerlink" title="提交载荷 （playload）"></a>提交载荷 （playload）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, n) &#123;</span><br><span class="line">    state.count += n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">store.commit(<span class="string">'increment'</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//大多数情况下，载荷应该是一个对象，可以包含对个记录字段</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count += payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">store.commit(<span class="string">'increment'</span>, &#123;</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="对象风格的提交方式"><a href="#对象风格的提交方式" class="headerlink" title="对象风格的提交方式"></a>对象风格的提交方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">store.commit(&#123;</span><br><span class="line">  type: <span class="string">'increment'</span>,</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Mutation-需遵守-Vue-的响应规则"><a href="#Mutation-需遵守-Vue-的响应规则" class="headerlink" title="Mutation 需遵守 Vue 的响应规则"></a>Mutation 需遵守 Vue 的响应规则</h3><p>Vuex 的 store 中的状态是响应式的，那么当我们变更状态时，监视状态的 Vue 组件也会自动更新。</p><ol><li>在 store 中提前初始化好所有所需属性。</li><li>当需要在对象上添加新属性时，有两种选择<ul><li>使用 <code>Vue.set(obj,&#39;key&#39;,&#39;value&#39;)</code></li><li>以新对象替换老对象 <code>state.obj={...state.obj,key:value}</code></li></ul></li></ol><h3 id="Mutation-必须是同步函数"><a href="#Mutation-必须是同步函数" class="headerlink" title="Mutation 必须是同步函数"></a>Mutation 必须是同步函数</h3><p>在 Vuex 中，mutation 都是同步事务：</p><p>任何在回调函数中进行的状态的改变都是不可追踪的。</p><h3 id="在组件中提交-Mutation"><a href="#在组件中提交-Mutation" class="headerlink" title="在组件中提交 Mutation"></a>在组件中提交 Mutation</h3><ul><li><code>this.$store.commit(xxx)</code></li><li>使用 <code>mapMutations</code> 将组件中的 methods 映射为 <code>store.commit</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations([</span><br><span class="line">      <span class="string">'increment'</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.commit('increment')`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapMutations` 也支持载荷：</span></span><br><span class="line">      <span class="string">'incrementBy'</span> <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...mapMutations(&#123;</span><br><span class="line">      add: <span class="string">'increment'</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.commit('increment')`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>Aciton 与  Mutation 类似</p><p>不同之处：</p><ul><li>Action 提交的是 mutation，而不是直接改变 state</li><li>Action 可以包含异步操作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.commit(<span class="string">'increment'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>context 与 store 实例具有相同的方法和属性，但不是store本身</li><li>contxt 提交 mutation<ol><li>context.commit</li><li>contxt.state context.getters</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  increment (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">'increment'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分发-Action"><a href="#分发-Action" class="headerlink" title="分发 Action"></a>分发 Action</h3><p>Action 通过 <code>store.dispatch</code> 分发</p><h3 id="在组件中分发-Action"><a href="#在组件中分发-Action" class="headerlink" title="在组件中分发 Action"></a>在组件中分发 Action</h3><ul><li><code>this.$store.dispatch(xxx)</code></li><li>使用 <code>mapActions</code> 将组件中的 methods 映射为 <code>store.dispatch</code></li></ul><h3 id="组合-Action"><a href="#组合-Action" class="headerlink" title="组合 Action"></a>组合 Action</h3><p>Action 通常是异步的</p><p><code>store.dispatch</code> 可以处理被触发的 <code>action</code> 的处理函数返回的 <code>Promise</code>，并且 <code>store.dispatch</code> 仍旧返回 <code>Promise</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">'someMutation'</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store.dispatch(<span class="string">'actionA'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在另一个 action 中也可以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch(<span class="string">'actionA'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">'someOtherMutation'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 async/await</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设 getData() 和 getOtherData() 返回的是 Promise</span></span><br><span class="line"></span><br><span class="line">actions: &#123;</span><br><span class="line">  <span class="keyword">async</span> actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">'gotData'</span>, <span class="keyword">await</span> getData())</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">await</span> dispatch(<span class="string">'actionA'</span>) <span class="comment">// 等待 actionA 完成</span></span><br><span class="line">    commit(<span class="string">'gotOtherData'</span>, <span class="keyword">await</span> getOtherData())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p>Vuex 允许我们将 store 分割成模块。</p><p>每个模块拥有自己的 state、mutation、action、getter。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">    state:&#123;...&#125;,</span><br><span class="line">    mutations:&#123;...&#125;,</span><br><span class="line">    actions:&#123;...&#125;,</span><br><span class="line">    getters:&#123;...&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">    state:&#123;...&#125;,</span><br><span class="line">    mutations:&#123;...&#125;,</span><br><span class="line">    actions:&#123;...&#125;,</span><br><span class="line">    getters:&#123;...&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    modules:&#123;</span><br><span class="line">        a:moduleA,</span><br><span class="line">        b:moduleB</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a   <span class="comment">// moduleA 的状态</span></span><br><span class="line">store.state.b   <span class="comment">// moduleB 的状态</span></span><br></pre></td></tr></table></figure><p>模块内部的具体分布</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">    state:&#123;<span class="attr">count</span>:<span class="number">0</span>&#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">        increment(state)&#123;</span><br><span class="line">            state.count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions:&#123;</span><br><span class="line">        <span class="comment">//局部状态通过 context.state 暴露。根节点状态 contex.rootState</span></span><br><span class="line">        incrementWithRootSum(&#123;state,commit,rootState&#125;)&#123;</span><br><span class="line">            <span class="keyword">if</span>((state.count + rootState.count)%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                commit(<span class="string">'increment'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getters:&#123;</span><br><span class="line">        sumWithRoot(state,getters,rootState)&#123;</span><br><span class="line">            <span class="keyword">return</span> state.count + rootState.count</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p>Vuex 需要遵守的规则：</p><ol><li>应用层级的状态应该集中到单个 store 对象中</li><li>提交 mutation 是更改状态的唯一方法，并且这个过程是同步的。</li><li>异步逻辑都应该封装到 action 里</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── api</span><br><span class="line">│   └── ... <span class="comment"># 抽取出API请求</span></span><br><span class="line">├── components</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── ...</span><br><span class="line">└── store</span><br><span class="line">    ├── index.js          <span class="comment"># 我们组装模块并导出 store 的地方</span></span><br><span class="line">    ├── actions.js        <span class="comment"># 根级别的 action</span></span><br><span class="line">    ├── mutations.js      <span class="comment"># 根级别的 mutation</span></span><br><span class="line">    └── modules</span><br><span class="line">        ├── cart.js       <span class="comment"># 购物车模块</span></span><br><span class="line">        └── products.js   <span class="comment"># 产品模块</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vuex&quot;&gt;&lt;a href=&quot;#Vuex&quot; class=&quot;headerlink&quot; title=&quot;Vuex&quot;&gt;&lt;/a&gt;Vuex&lt;/h1&gt;&lt;p&gt;Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。&lt;/p&gt;
&lt;p&gt;以一个全局单例管理组件的共享状态&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>前端开发是什么?</title>
    <link href="http://yoursite.com/2019/05/21/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2019/05/21/前端开发/</id>
    <published>2019-05-20T16:57:45.000Z</published>
    <updated>2019-05-20T17:01:49.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h1><p>pc端，移动端</p><p>移动前端开发工程师，h5前端开发工程师，native前端开发工程师，Hybrid前端开发工程师</p><ul><li>pc端</li></ul><p>ie6-11，firefox，chrome，safari都得兼容css和js。</p><ul><li>mobile端</li></ul><p>webkit内核的浏览器和chrome，uc，qq，小米手机浏览器</p><h2 id="移动端web-app开发与-Hybrid-开发开发区别。"><a href="#移动端web-app开发与-Hybrid-开发开发区别。" class="headerlink" title="移动端web app开发与 Hybrid 开发开发区别。"></a>移动端web app开发与 Hybrid 开发开发区别。</h2><p>移动端web app，移动端网页，Hybrid开发</p><h3 id="移动端web-app"><a href="#移动端web-app" class="headerlink" title="移动端web app"></a>移动端web app</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    meta的作用：让普通移动网页被添加到主屏幕后，拥有一些类native的功能。</span></span><br><span class="line"><span class="comment">        ex: ios 隐藏上下状态栏，禁止弹性拖拽，修改顶部颜色，实现全屏等。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另一种类型：手机taobao，手机美团，手机微博的网页版。</p><p>开发者把它们伪装成 web app 的交互体验。</p><h3 id="普通移动端网页"><a href="#普通移动端网页" class="headerlink" title="普通移动端网页"></a>普通移动端网页</h3><p>手机新浪网，手机腾讯新闻</p><h3 id="Hybrid开发"><a href="#Hybrid开发" class="headerlink" title="Hybrid开发"></a>Hybrid开发</h3><p>使用原生作为容器，web实现大部分功能。</p><ul><li>Hybrid是半Native半web开发模式</li><li>成熟的Hybrid模式意味着业务逻辑均由H5实现</li><li>成熟的Hybrid模式可复用性非常高,可以跨平台开发</li></ul><blockquote><p>优点：资源是本地化的，所以可以使用比较重的框架，如angular，react，一些三方框架，因为最终都是通过和native代码捆绑发布的。</p></blockquote><h2 id="js-和-css"><a href="#js-和-css" class="headerlink" title="js 和 css"></a>js 和 css</h2><h3 id="js-的使用"><a href="#js-的使用" class="headerlink" title="js 的使用"></a>js 的使用</h3><blockquote><p>少用框架，多手写。</p></blockquote><ul><li><p>移动端的优化瓶颈：<br>网络加载速度不一致，有wifi，有3g，有4g，还有2g。</p></li><li><p><strong>代码量在移动端开发是很大的一个考察点。</strong></p></li></ul><h3 id="css-的使用"><a href="#css-的使用" class="headerlink" title="css 的使用"></a>css 的使用</h3><ol><li>原生属性/特性的掌握</li><li>很多属性极限突破可以使用缩放，倾斜这种手段来hack，比如最小字体，比如各种自己画的伪类图标</li><li>能css画的不要用图。</li><li>大小需要自适应的图标做成字体的不要画。</li><li>能flex布局的不要用浮动，不要用绝对定位（不利于页面布局的扩展）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端开发&quot;&gt;&lt;a href=&quot;#前端开发&quot; class=&quot;headerlink&quot; title=&quot;前端开发&quot;&gt;&lt;/a&gt;前端开发&lt;/h1&gt;&lt;p&gt;pc端，移动端&lt;/p&gt;
&lt;p&gt;移动前端开发工程师，h5前端开发工程师，native前端开发工程师，Hybrid前端开发工程师
      
    
    </summary>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>[面试]-浏览器相关</title>
    <link href="http://yoursite.com/2019/05/19/%E9%9D%A2%E8%AF%95-brower/"/>
    <id>http://yoursite.com/2019/05/19/面试-brower/</id>
    <published>2019-05-18T16:10:40.000Z</published>
    <updated>2019-05-20T17:08:51.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><h2 id="事件机制"><a href="#事件机制" class="headerlink" title="事件机制"></a>事件机制</h2><h3 id="事件触发三阶段"><a href="#事件触发三阶段" class="headerlink" title="事件触发三阶段"></a>事件触发三阶段</h3><p>DOM2级事件规定的事件流包括三个阶段：事件的捕获阶段、处于目标阶段和事件冒泡阶段。</p><ul><li>事件的捕获阶段：<code>window</code>往事件触发处传播，遇到注册的捕获事件会触发。</li><li>目标阶段：传播到事件触发处时触发注册的事件</li><li>冒泡阶段：从事件触发往<code>window</code>传播</li></ul><p>事件触发一般会按照这三个阶段顺序执行。但也有特例，如果给一个目标节点同时注册冒泡和捕获事件，会按照事件注册的顺序执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node.addEventListener(<span class="string">'click'</span>,e=&gt;<span class="built_in">console</span>.log(<span class="string">'冒泡'</span>),<span class="literal">false</span>)</span><br><span class="line">node.addEventListener(<span class="string">'click'</span>,e=&gt;<span class="built_in">console</span>.log(<span class="string">'捕获'</span>),<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h3><p><strong><code>EventTarget.addEventListener()</code></strong> 方法将指定的监听器注册到 <code>EventTarget</code> 上，当该对象触发指定的事件时，指定的回调函数就会被执行。 事件目标可以是一个文档上的元素 <code>Element</code>,<code>Document</code>和<code>Window</code>或者任何其他支持事件的对象 (比如 <code>XMLHttpRequest</code>)。</p><p><code>addEventListener()</code>的工作原理是将实现<code>EventListener</code>的函数或对象添加到调用它的<code>EventTarget</code>上的指定事件类型的事件侦听器列表中。</p><p>语法：</p><blockquote><p><code>target.addEventListener(type, listener[, options]);</code><br><br><code>target.addEventListener(type, listener[, useCapture]);</code></p></blockquote><p>参数：</p><ul><li><code>type</code>: 监听事件类型的字符创</li><li><code>listener</code>：当所监听的事件类型触发时，会接收到一个事件通知</li><li><code>options</code>：一个有关<code>listener</code>属性的可选参数对象<ul><li><code>capture</code></li><li><code>once</code>：Boolean，为<code>true</code>时，表示<code>listener</code>添加后只调用一次，调用完会清除<code>listener</code></li><li><code>passive</code>：Boolean，为<code>true</code>时，表示listener不会调用<code>preventDefault()</code></li></ul></li><li><code>useCapture</code>：Boolean，该类型事件捕获阶段传递到目标时触发</li></ul><h3 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h3><p>如果一个节点中的子节点是动态生成的，那么子节点需要注册事件的话应该注册在父节点上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'#ul'</span>)</span><br><span class="line">ul.addEventListener(<span class="string">'click'</span>, e =&gt; <span class="built_in">console</span>.log(e.target))</span><br></pre></td></tr></table></figure><ul><li>优点<ul><li>节省内存</li><li>不需要给子节点注销事件</li></ul></li></ul><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>浏览器出于安全考虑，有同源策略。所谓同源，就是同个协议，同个域名，同个端口。若不是同源，AJAX请求会失败。</p><p>解决方案</p><h3 id="JSOP"><a href="#JSOP" class="headerlink" title="JSOP"></a>JSOP</h3><p>JSONP利用<code>&lt;script&gt;</code>标签没有跨域限制的漏洞。通过<code>&lt;srcipt&gt;</code>标签指向一个目的地址并提供一个回调函数来接收数据。</p><p>JSONP仅限于<code>get</code>请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://domain/api?param1=a&amp;param2=b&amp;callback=jsonp"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS需要浏览器和后端同时支持。IE 8 和 9 需要通过 <code>XDomainRequest</code>来实现。</p><p>浏览器会自动进行CORS通信，实现CORS关键在与后端。只要后端实现了CORS，就实现了跨域。</p><p>服务端设置 <code>Access-Control-Allow-Origin</code> 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。</p><h3 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h3><p>该方式只能用于二级域名相同的情况下。</p><p><code>a.test.com</code>和<code>b.test.com</code>使用于该方式。</p><p>只需要给页面添加 <code>document.domain = &#39;test.com&#39;</code></p><h3 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h3><p>这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送消息端</span></span><br><span class="line"><span class="built_in">window</span>.parent.postMessage(<span class="string">'message'</span>,<span class="string">'http://test.com'</span>)</span><br><span class="line"><span class="comment">//接收消息端</span></span><br><span class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> MessageChannel()</span><br><span class="line">mc.addEventListener(<span class="string">'message'</span>,e=&gt;&#123;</span><br><span class="line">    <span class="keyword">var</span> origin = e.origin || e.originalEvent.origin</span><br><span class="line">    <span class="keyword">if</span>(origin === <span class="string">'http://test.com'</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'pass'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Event-loop"><a href="#Event-loop" class="headerlink" title="Event loop"></a>Event loop</h2><p>JS在执行过程中会产生执行环境，这些执行环境会被顺序加入到执行栈中。如果遇到异步的代码，会被挂起并加入到Task（有多种task）队列中。一旦执行栈为空，Event Loop 就会从 Task 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上JS的异步还是同步行为。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`script start`</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>),<span class="number">0</span>) <span class="comment">// HTML5规定，至少为4ms，因此还是属于异步。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`script end`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// script start -&gt; script end -&gt; setTimeout</span></span><br></pre></td></tr></table></figure><p>不同的任务源会被分配到不同的Task队列中，任务源（microtask）和宏任务（marcrotask）。</p><p>ES6规范中，microtask称为<code>jobs</code>，macrotask称为<code>task</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>微任务：<code>process.nextTick</code>，<code>promise</code>，<code>Object.observe</code>，<code>MutationObserver</code></p><p>宏任务：<code>script</code>，<code>setTimeout</code>，<code>setInterval</code>，<code>setImmediate</code>，<code>I/O</code>，<code>UI rendering</code></p><p>宏任务包括了<code>script</code>，浏览器会先执行一个宏任务，接下来有异步代码的话就执行微任务。</p><h3 id="Event-loop-执行顺序"><a href="#Event-loop-执行顺序" class="headerlink" title="Event loop 执行顺序"></a>Event loop 执行顺序</h3><ol><li>执行同步代码，属于宏任务</li><li>执行栈为空，查询是否有微任务需要执行</li><li>执行所以微任务</li><li>必要的话渲染 UI</li><li>开始下一轮 Event loop，执行宏任务中的异步代码</li></ol><p>因此，若宏任务中的异步代码有大量计算并且需要操作DOM，为了更好的界面响应，可以把操作DOM放入微任务中。</p><h3 id="Node中的-Event-loop"><a href="#Node中的-Event-loop" class="headerlink" title="Node中的 Event loop"></a>Node中的 Event loop</h3><p>Node 的 Event loop 分为6个阶段</p><ul><li>timers</li><li>I/O callbacks</li><li>idle , prepare</li><li>poll</li><li>check</li><li>close callbacks</li></ul><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><h3 id="cookie，localStorage，sessionStorage，indexDB"><a href="#cookie，localStorage，sessionStorage，indexDB" class="headerlink" title="cookie，localStorage，sessionStorage，indexDB"></a><code>cookie</code>，<code>localStorage</code>，<code>sessionStorage</code>，<code>indexDB</code></h3><table><thead><tr><th>特性</th><th>cookie</th><th>localStorage</th><th>sessionStorage</th><th>indexDB</th></tr></thead><tbody><tr><td>数据生命周期</td><td>一般由服务器生成，可以设置过期时间</td><td>除非被清理，否则一直存在</td><td>页面关闭就清理</td><td>除非被清理，否则一直存在</td></tr><tr><td>数据存储大小</td><td>4k</td><td>5M</td><td>5M</td><td>无限</td></tr><tr><td>与服务端通信</td><td>每次都会携带在header中，对于请求性能影响</td><td>不参与</td><td>不参与</td><td>不参与</td></tr></tbody></table><h3 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h3><blockquote><p>Srivice Worker 本质上充当 Web 应用程序和浏览器之间的代理服务器，也可以在网络可用时，作为浏览器和网络间的代理。它们旨在（除其他之外）使得能够创建有效的离线体验，拦截网络请求并基于网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台同步 API。</p></blockquote><p>Service Worker 可以使你的应用先访问本地缓存资源，所以在离线状态时，在没有通过网络接收到更多的数据前，仍可以提供基本的功能（一般称之为 Offline First）。这是原生APP 本来就支持的功能，这也是相比于 web app，原生 app 更受青睐的主要原因。</p><p>Service Worker 通常用来做缓存文件，提高首屏速度。</p><h2 id="渲染机制"><a href="#渲染机制" class="headerlink" title="渲染机制"></a>渲染机制</h2><p>浏览器渲染机制的步骤：</p><ol><li>处理HTML并构建DOM树</li><li>处理CSS并构建CSSDOM树</li><li>合并DOM树和CSSDOM树为一颗渲染树</li><li>根据渲染树布局，计算节点位置</li><li>调用GPU绘制，合成图层，显示在屏幕上</li></ol><p>在构建CSSDOM时，会阻塞渲染，直至CSSDOM树完成。<br><br>构建CSSDOM十分消耗性能，所以应该保证层级扁平，减少过度层叠。</p><p>当 HTML 解析到 script 标签时，会暂停构建 DOM，完成后才会从暂停的地方重新开始。也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件。并且 CSS 也会影响 JS 的执行，只有当解析完样式表才会执行 JS，所以也可以认为这种情况下，CSS 也会暂停构建 DOM。</p><p>script影响DOM构建，CSS影响script执行-&gt; CSS影响DOM构建</p><h3 id="Load-和-DOMContentLoaded-区别"><a href="#Load-和-DOMContentLoaded-区别" class="headerlink" title="Load 和 DOMContentLoaded 区别"></a>Load 和 DOMContentLoaded 区别</h3><p>Load触发，代表全部资源加载完毕。</p><p>DOMContentLoaded表示初始的HTML被完全加载解析。</p><h3 id="图层"><a href="#图层" class="headerlink" title="图层"></a>图层</h3><p>普通文档流可视为一个图层。<br><br>特定的属性可以生成一个新的图层。<br><br><strong>不同图层的渲染互不影响</strong>，某些需要频繁渲染的建议单独生成一个新图层，提高性能。</p><p>常用的生成新图层的属性：</p><ul><li>3D变换：<code>translate3d</code>、<code>translateZ</code></li><li><code>will-change</code></li><li><code>video</code> <code>iframe</code> 标签</li><li>通过动画实现的<code>opacity</code>动画转换</li><li><code>postion:fixed</code></li></ul><h2 id="重绘（Repaint）和回流（Reflow）"><a href="#重绘（Repaint）和回流（Reflow）" class="headerlink" title="重绘（Repaint）和回流（Reflow）"></a>重绘（Repaint）和回流（Reflow）</h2><ul><li>重绘：当需要改变节点外观不影响布局</li><li>回流：布局或者集合属性需要改变</li></ul><p>回流必重绘，重绘不一定回流。</p><p>以下几个动作可能导致性能问题：</p><ul><li>改变 window 大小</li><li>改变字体</li><li>添加或删除样式</li><li>文字改变</li><li>定位或者浮动</li><li>盒模型</li></ul><p>重绘与回流与 Event loop 有关</p><h3 id="减少重绘和回流"><a href="#减少重绘和回流" class="headerlink" title="减少重绘和回流"></a>减少重绘和回流</h3><ul><li>使用<code>translate</code>代替<code>top</code></li><li>使用<code>visibility</code>替换<code>display:none</code>（前者重绘，后者回流）</li><li>DOM离线后修改。（先<code>display:none</code>，一次reflow），修改满意后，再显示出来。</li><li>不要在循环中遍历DOM属性值</li><li>不要用table布局，小改动容易影响整个布局</li><li>动画实现的速度的选择，动画速度越快，回流次数越多</li><li>CSS选择符从右往左匹配查找（从左到右会出现回溯的情况）</li><li>将频繁运行的动画变为图层，图层能够阻止该节点回流影响别的元素。比如对于 video 标签，浏览器会自动将该节点变为图层。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;浏览器&quot;&gt;&lt;a href=&quot;#浏览器&quot; class=&quot;headerlink&quot; title=&quot;浏览器&quot;&gt;&lt;/a&gt;浏览器&lt;/h1&gt;&lt;h2 id=&quot;事件机制&quot;&gt;&lt;a href=&quot;#事件机制&quot; class=&quot;headerlink&quot; title=&quot;事件机制&quot;&gt;&lt;/a&gt;事件机
      
    
    </summary>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>[面试]-JS相关</title>
    <link href="http://yoursite.com/2019/05/11/%E9%9D%A2%E8%AF%95-js/"/>
    <id>http://yoursite.com/2019/05/11/面试-js/</id>
    <published>2019-05-11T09:20:45.000Z</published>
    <updated>2019-05-20T17:08:50.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><ul><li>基本类型</li></ul><blockquote><p>除了<code>null</code>都可以显示正确的类型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">//object</span></span><br></pre></td></tr></table></figure><p>JS 的最初版本中，使用的是 32 位系统，为了性能考虑使用低位存储了变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object</p><ul><li>对象</li></ul><blockquote><p>除了函数都会显示<code>object</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">console</span>.log <span class="comment">//function</span></span><br></pre></td></tr></table></figure><ul><li><p><code>Object.prototype.toString.call()</code>获得变量的正确类型<code>[object Type]</code></p></li><li><p><code>undefined</code>不是保留字，在低版本可以被赋值。因此不适合作为比较，使用<code>void 0</code>返回的<code>undefined</code>可以满足要求</p></li></ul><h2 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h2><ul><li>转Boolean</li></ul><p>条件判断时，除了<code>undefined</code>,<code>null</code>,<code>false</code>,<code>NaN</code>,<code>&#39;&#39;</code>,<code>0</code>,<code>-0</code>，其它都转为true，包括所有对象。</p><ul><li>对象转基本类型</li></ul><p>调用优先级：<code>Symbol.toPrimitive</code> , <code>valueOf</code> , <code>toString</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    valueOf()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    toString()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'1'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="built_in">Symbol</span>.toPrimitive]()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span> + a <span class="comment">// =&gt; 3</span></span><br><span class="line"><span class="string">'1'</span> + a <span class="comment">// =&gt; '12'</span></span><br></pre></td></tr></table></figure><ul><li>四则运算符</li></ul><blockquote><p>加法的执行：将值转为原始值-&gt;转化为数字-&gt;转化为字符串</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="string">'1'</span> <span class="comment">// '11'</span></span><br><span class="line"><span class="number">2</span> * <span class="string">'2'</span> <span class="comment">// 4</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>] + [<span class="number">2</span>,<span class="number">1</span>] <span class="comment">// '1,22,1'</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>].toString() <span class="comment">// -&gt; '1,2'</span></span><br><span class="line"><span class="string">'1,2'</span> + <span class="string">'2,1'</span> <span class="comment">// '1,22,1'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'a'</span> + + <span class="string">'b'</span> <span class="comment">// -&gt; 'aNaN'</span></span><br><span class="line"><span class="comment">// + 'b' -&gt; NaN</span></span><br><span class="line"><span class="comment">// + '1' -&gt; 1</span></span><br></pre></td></tr></table></figure><ul><li><code>==</code>操作符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[] == ![] <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><ul><li>比较运算符<ol><li>如果是对象。通过<code>toPrimitive</code>转化对象</li><li>如果是字符串。通过<code>unicode</code>字符索引比较</li></ol></li></ul><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><ul><li><p>每个函数都有函数都有<code>prototype</code>属性，除了<code>Function.prototype.bind()</code>，该属性指向原型。</p></li><li><p>每个对象都有<code>__proto__</code>属性，指向了创建该对象的构造函数逇原型。</p></li><li><p>对象可以通过<code>__proto__</code>来寻找不属于该对象的属性，<code>__proto__</code>将对象连接组成了原型链。</p></li></ul><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><ol><li>新生成一个对象</li><li>链接到原型</li><li>绑定<code>this</code></li><li>返回新对象</li></ol><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p><code>instanceof</code>可以正确判断对象的类型，因为内部机制是通过判断对象的原型链中是不是能找到类型的<code>prototype</code>。</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ul><li><code>this</code>依赖于调用函数前的对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="number">2</span>,</span><br><span class="line">    foo:foo</span><br><span class="line">&#125;</span><br><span class="line">obj.foo();</span><br></pre></td></tr></table></figure><ul><li>使用<code>new</code>优先级最高，<code>this</code>只会绑定在创建的对象<code>c</code>上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> foo()</span><br><span class="line">c.a = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(c.a)</span><br></pre></td></tr></table></figure><ul><li><p>利用<code>call</code> , <code>apply</code> , <code>bind</code>改变<code>this</code>，优先级仅次于<code>new</code></p></li><li><p>箭头函数的<code>this</code>只取决于外部非箭头函数的<code>this</code></p></li></ul><h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><ul><li>全局执行上下文</li><li>函数执行上下文</li><li>eval执行上下文</li></ul><p>每个执行上下文都有三个重要属性：</p><ol><li>变量对象</li><li>作用域链（js采用词法作用域，变量定义时就可确定作用域）</li><li>this</li></ol><h3 id="关于-var"><a href="#关于-var" class="headerlink" title="关于 var"></a>关于 <code>var</code></h3><p>在生成执行上下文的时候，有两个阶段。第一阶段是创建阶段，JS解释器会找出需要提升的变量和函数，并且给他们提前开辟空间，函数整个会存入内存，变量只声明且赋值为<code>undefined</code>。第二阶段，代码执行阶段，我们可以提前使用。</p><p>在提升的过程中，相同的函数会覆盖上一个函数，并且函数优先于变量提升</p><h3 id="关于-let"><a href="#关于-let" class="headerlink" title="关于 let"></a>关于 <code>let</code></h3><p>ES6中引入了<code>let</code>，<code>let</code>也有提升声明但是没有赋值。</p><h3 id="非匿名立即执行函数"><a href="#非匿名立即执行函数" class="headerlink" title="非匿名立即执行函数"></a>非匿名立即执行函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    foo = <span class="number">10</span></span><br><span class="line">    <span class="built_in">console</span>.log(foo)</span><br><span class="line">&#125;())</span><br><span class="line"><span class="comment">// -&gt; ƒ foo() &#123; foo = 10 ; console.log(foo)&#125; [Function: foo]</span></span><br></pre></td></tr></table></figure><p>JS在遇到非匿名立即执行函数时，会创建一个特定的辅助对象，然后将函数名作为特定对象的属性，因此函数内部才可以访问到<code>foo</code>，但是该值是只读的，所以对它的赋值并不生效。</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><blockquote><p>函数A返回函数B，并且函数B使用到了A的变量，函数B称为闭包。</p></blockquote><p>为什么函数A已经出栈，函数B还可以使用到它的变量呢，因为JS引擎可以通过<code>逃逸分析</code>确定哪些变量需要存储在堆上，哪些存储在栈上。</p><h3 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;,i*<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -&gt; 输出结果都为6，因为setTimeout是异步函数，循环结束后再执行。</span></span><br></pre></td></tr></table></figure><p>解决方案：</p><ul><li>闭包</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(j)</span><br><span class="line">        &#125;,i*<span class="number">1000</span>)</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>setTimeout</code>的第三个参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(j)</span><br><span class="line">    &#125;,i*<span class="number">1000</span>,i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>let</code>定义</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let会创建块级作用域，把每次新的i值创建一个副本保留在每个作用域中。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;,i*<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h2><p>在开发中，我们给一个变量赋值一个对象，两者的值会是同一个引用，一方修改，另一方跟着修改。</p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><ul><li><code>Object.assign</code>可以解决上述问题</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    age : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Object</span>.assign(&#123;&#125;,a)</span><br><span class="line">a.age = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(b.age) <span class="comment">//  1</span></span><br></pre></td></tr></table></figure><ul><li>拓展运算符<code>...</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    age : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = &#123;...a&#125;</span><br><span class="line">a.age = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(b.age) <span class="comment">//  1</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：浅拷贝只能解决第一层，若有嵌套对象的话，则依然会享有共同的引用。此时就需要深拷贝。</p></blockquote><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>解决方案：</p><h4 id="JSON-parse-JSON-stringify-object"><a href="#JSON-parse-JSON-stringify-object" class="headerlink" title="JSON.parse(JSON.stringify(object))"></a><code>JSON.parse(JSON.stringify(object))</code></h4><p>局限性：</p><ol><li><p>忽略<code>undefined</code> , <code>symbol</code></p></li><li><p>不能序列化函数</p></li><li><p>不能解决循环引用的对象</p></li></ol><h4 id="MessageChannel拷贝的对象含有内置类型并且不包含函数"><a href="#MessageChannel拷贝的对象含有内置类型并且不包含函数" class="headerlink" title="MessageChannel拷贝的对象含有内置类型并且不包含函数"></a><code>MessageChannel</code>拷贝的对象含有内置类型并且不包含函数</h4><h4 id="lodash深拷贝"><a href="#lodash深拷贝" class="headerlink" title="lodash深拷贝"></a><a href="https://lodash.com/docs##cloneDeep" target="_blank" rel="noopener">lodash深拷贝</a></h4><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><ul><li>ES6模块化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// file b.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;a,b&#125; form <span class="string">'./a.js'</span></span><br><span class="line"><span class="keyword">import</span> xxx form <span class="string">'./b.js'</span></span><br></pre></td></tr></table></figure><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><ul><li>Node独有规范，浏览器使用需要<code>Browerify</code>解析</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    a:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">exports.a = <span class="number">1</span></span><br><span class="line"><span class="comment">//两者用法相似，只是不能对exports直接赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = <span class="built_in">require</span>(<span class="string">'./a.js'</span>);</span><br><span class="line"><span class="built_in">module</span>.a <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><blockquote><p><code>CommonJS</code> 和 <code>ES6</code> 模块化的区别</p></blockquote><ul><li>前者支持动态导入，<code>require(${path}/xx.js)</code>，后者暂不支持</li><li>前者是同步导入，作用于服务器。后者是异步导入，作用于浏览器。</li><li>前者导出是值拷贝。后者是实时绑定。</li></ul><h3 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h3><ul><li><code>RequireJS</code>提出的规范</li></ul><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>防抖动是将多次执行变为最后一次执行。</p><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>节流是将多次执行变成每隔一段时间执行。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h3><blockquote><p><code>Object.create(proto, [propertiesObject])</code></p></blockquote><p>参数：</p><ul><li><code>proto</code></li></ul><p>新创建对象的原型对象</p><ul><li><code>propertiesObject</code></li></ul><p>可选。如果没有指定为 undefined，则是要添加到新创建对象的可枚举属性（即其自身定义的属性，而不是其原型链上的枚举属性）对象的属性描述符以及相应的属性名称。这些属性对应Object.defineProperties()的第二个参数。</p><ul><li>返回值</li></ul><p>一个新对象，带着指定的原型对象和属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将子类的原型设置为父类的原型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Super.prototype.getNumber = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Sub.prototype = <span class="built_in">Object</span>.create(Super.prototype,&#123;</span><br><span class="line">    <span class="keyword">constructor</span>: &#123;</span><br><span class="line">    value: Sub,</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sub = <span class="keyword">new</span> SuB();</span><br></pre></td></tr></table></figure><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> classMethod() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> classMethod() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.classMethod() + <span class="string">', too'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Bar.classMethod() <span class="comment">// "hello, too"</span></span><br></pre></td></tr></table></figure><h2 id="call-apply-bind区别"><a href="#call-apply-bind区别" class="headerlink" title="call,apply,bind区别"></a><code>call</code>,<code>apply</code>,<code>bind</code>区别</h2><blockquote><p><code>call</code>和<code>apply</code>都是为了改变<code>this</code>的指向。作用相同，传参方式不同。</p></blockquote><ul><li><p><code>call</code>和<code>apply</code>第一个参数都是调用者<code>this</code>，不传参则默认为<code>window</code>。</p></li><li><p>除第一个参数外，<code>call</code>可以接收一个参数列表，<code>apply</code>只接收一个参数数组。</p></li></ul><h3 id="模拟与实现call和apply"><a href="#模拟与实现call和apply" class="headerlink" title="模拟与实现call和apply"></a>模拟与实现<code>call</code>和<code>apply</code></h3><ul><li>不传第一个参数，默认为<code>window</code></li><li>改变<code>this</code>指向，新对象执行该函数。=&gt; 给新对象添加一个函数，执行后删除。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = context || <span class="built_in">window</span></span><br><span class="line">    <span class="comment">//给 context 添加一个属性</span></span><br><span class="line">    context.fn = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// 将 context 后面的参数取出来</span></span><br><span class="line">    <span class="keyword">var</span> args = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">var</span> result = context.fn(...args)</span><br><span class="line">    <span class="comment">//删除 fn</span></span><br><span class="line">    <span class="keyword">delete</span> context.fn</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bind也是改变指向，只是返回的是一个函数。我们可以通过bind实现"><a href="#bind也是改变指向，只是返回的是一个函数。我们可以通过bind实现" class="headerlink" title="bind也是改变指向，只是返回的是一个函数。我们可以通过bind实现"></a><code>bind</code>也是改变指向，只是返回的是一个函数。我们可以通过<code>bind</code>实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Error'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> args = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">//返回一个函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> <span class="keyword">instanceof</span> F)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> _this(...args,...arguments)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _this.apply(context,args.concat(...arguments))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><blockquote><p>Promise是一个简单容器，存放着未来某个才会结束的世界的结果。</p></blockquote><h3 id="Promise对象特点"><a href="#Promise对象特点" class="headerlink" title="Promise对象特点"></a><code>Promise</code>对象特点</h3><ul><li>对象状态不受外界影响。</li></ul><p><code>Promise</code>对象表示一个异步操作，有三种状态。<code>pending</code>(进行中)、<code>fulfilled</code>(已成功)和<code>rejected</code>(已失败)。只有异步操作的结果可以确定当前是哪一种状态。</p><ul><li>状态一旦改变，就不会再变。<ol><li><code>pending</code>-&gt;<code>fulfilled</code></li><li><code>pending</code>-&gt;<code>rejected</code></li></ol></li></ul><p>如果改变已经发生了，再对<code>Promise</code>对象添加回调函数，也会立即得到这个结果。</p><p>通常，我们会将<code>resolved</code>指定为<code>fulfilled</code>状态</p><h3 id="Promise对象缺点"><a href="#Promise对象缺点" class="headerlink" title="Promise对象缺点"></a><code>Promise</code>对象缺点</h3><ul><li>无法取消，一旦新建，立即执行</li><li>不设置回调函数，错误只会抛在内部</li><li>当处于<code>pending</code>时，无法得知进展到什么情况</li></ul><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p><code>Promise</code>接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</p><p><code>Promise</code>实例生成以后，可以用<code>then</code>方法分别指定<code>resolved</code>状态和<code>rejected</code>状态的回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(resolve,ms,<span class="string">'done'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">timeout(<span class="number">100</span>).then(<span class="function"><span class="params">value</span>=&gt;</span></span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">).catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure><blockquote><p>一般使用<code>Promise.prototype.catch()</code>，而不在<code>then</code>中指定<code>reject</code></p></blockquote><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><ul><li>语法上，首先可以把它理解成，<code>Generator</code> 函数是一个状态机，封装了多个内部状态。</li></ul><p>执行 <code>Generator</code> 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 <code>Generator</code> 函数内部的每一个状态。</p><ul><li>形式上，<code>Generator</code> 函数是一个普通函数，但是有两个特征。<ul><li>function关键字与函数名之间有一个星号</li><li>函数体内部使用<code>yield</code>表达式，定义不同的内部状态</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 * 表示这是一个Generator函数</span></span><br><span class="line"><span class="comment">// 使用 yield 暂停代码</span></span><br><span class="line"><span class="comment">// 调用 next 恢复执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = test()</span><br><span class="line"><span class="built_in">console</span>.log(b.next())</span><br><span class="line"><span class="built_in">console</span>.log(b.next())</span><br><span class="line"><span class="built_in">console</span>.log(b.next())</span><br></pre></td></tr></table></figure><h2 id="Map、FlatMap、Reduce"><a href="#Map、FlatMap、Reduce" class="headerlink" title="Map、FlatMap、Reduce"></a>Map、FlatMap、Reduce</h2><p><code>map</code>的作用是生成一个新数组，通过遍历原数组，对每一个元素进行变换后<code>append</code>到新数组</p><h3 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map"></a><code>Array.prototype.map</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr.map(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">currentValue[, index[, array]]</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// Return element for new_array</span></span><br><span class="line">&#125;[, thisArg])</span><br></pre></td></tr></table></figure><ul><li><code>callback</code><ul><li>当前元素值</li><li>对应索引</li><li>被调用的数组</li></ul></li><li><p><code>thisArg</code></p><ul><li>执行<code>callback</code>时的使用的<code>this</code></li></ul></li><li><p>示例代码</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">v</span> =&gt;</span> v+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="Array-prototype-flatMap"><a href="#Array-prototype-flatMap" class="headerlink" title="Array.prototype.flatMap"></a><code>Array.prototype.flatMap</code></h3><p><code>flatMap</code>与<code>map</code>作用一致，只是会把数组扁平化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,[<span class="number">2</span>],<span class="number">3</span>].faltMap(v = &gt; v +<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="Array-prototype-reduce"><a href="#Array-prototype-reduce" class="headerlink" title="Array.prototype.reduce"></a><code>Array.prototype.reduce</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(callback[, initialValue])</span><br></pre></td></tr></table></figure><ul><li><code>callback</code><ul><li><code>accumulator</code> 累计回调的返回值</li><li><code>currentVaule</code> 正在处理的元素</li><li><code>currentIndex</code> (可选)</li><li><code>array</code> (可选) 原数组</li></ul></li><li><code>initialValue</code></li></ul><p>作为调用<code>callback</code>函数时的第一个参数值，如果没有提供，则使用数组的第一个元素。</p><ul><li><p>返回值： 累计的结果</p></li><li><p>示例代码：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].reduce(<span class="function">(<span class="params">acc,v</span>)=&gt;</span> acc+v)</span><br></pre></td></tr></table></figure><h2 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a><code>async</code>和<code>await</code></h2><p>一个函数加上<code>async</code>，那么该函数返回一个<code>Promise</code>，其实本质上是<code>Generator</code>的语法糖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(test()) <span class="comment">// Promise &#123; '1' &#125;</span></span><br></pre></td></tr></table></figure><p><code>await</code>只能在<code>async</code>函数中使用，遇到<code>await</code>会立即返回一个<code>pending</code>状态的<code>Promise</code>对象，可以使用<code>then</code>方法添加回调函数。当函数执行的时候，一旦遇到<code>await</code>就会先返回，<strong>等到异步操作完成，再接着执行函数体内后面的语句</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'finish'</span>)</span><br><span class="line">            resolve(<span class="string">'sleep'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="keyword">await</span> sleep()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'object'</span>)</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>以上会先打印<code>finish</code>，再打印<code>object</code>。因为 <code>await</code> 会等待 <code>sleep</code> 函数 <code>resolve</code> ，所以即使后面是同步代码，也不会先去执行同步代码再来执行异步代码</p><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a><code>Proxy</code></h2><p>ES6中的功能，用来自定义对象中的操作。</p><p><code>Proxy</code>可以理解成为一个目标对象的拦截器，因此提供了一种机制，可以的外界的访问进行过滤或改写。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler)</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li><code>target</code> 要拦截的对象</li><li><code>handler</code>  定义拦截行为，也是一个对象</li></ul><p>示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="keyword">get</span>: function(target, name)&#123;</span><br><span class="line">        <span class="keyword">return</span> name <span class="keyword">in</span> target ? target[name] : <span class="number">37</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, handler);</span><br><span class="line"></span><br><span class="line">p.a = <span class="number">1</span>;</span><br><span class="line">p.b = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p.a, p.b);    <span class="comment">// 1, undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'c'</span> <span class="keyword">in</span> p, p.c);    <span class="comment">// false, 37</span></span><br></pre></td></tr></table></figure><h2 id="0-1-0-2-0-3"><a href="#0-1-0-2-0-3" class="headerlink" title="0.1+0.2!=0.3"></a>0.1+0.2!=0.3</h2><p>JS采用 IEEE 754 双精度版本， 这是该版本伴随的问题。</p><p><code>0.10</code>的二进制表示为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (0011)表循环</span></span><br><span class="line"><span class="number">0.1</span> = <span class="number">2</span>^<span class="number">-4</span>*<span class="number">1.10011</span>(<span class="number">0011</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">0.2</span> = <span class="number">2</span>^<span class="number">-3</span> * <span class="number">1.10011</span>(<span class="number">0011</span>)</span><br></pre></td></tr></table></figure><p>IEEE 754 双精度。六十四位中除去一位符号位整数占11位，小数占五十二位。0.1和0.2都是无限循环小数，所以小数末尾处需判断是否进位。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>^<span class="number">-4</span> * <span class="number">1.10011</span>..<span class="number">.001</span> =&gt; <span class="number">2</span>^<span class="number">-4</span> * <span class="number">1.10011</span>(<span class="number">0011</span> * <span class="number">12</span>次)<span class="number">010</span></span><br><span class="line"><span class="number">2</span>^<span class="number">-3</span> * <span class="number">1.10011</span>..<span class="number">.001</span> =&gt; <span class="number">2</span>^<span class="number">-4</span> * <span class="number">1.10011</span>(<span class="number">0011</span> * <span class="number">12</span>次)<span class="number">010</span></span><br></pre></td></tr></table></figure><p>相加结果：<code>2^-2 * 1.0011(0011 * 11次)0100</code></p><p>折合成十进制：<code>0.30000000000000004</code></p><h3 id="原生JS解决方法"><a href="#原生JS解决方法" class="headerlink" title="原生JS解决方法"></a>原生JS解决方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>((<span class="number">0.1</span> + <span class="number">0.2</span>).toFixed(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><ul><li><code>.</code> 匹配任意字符，除换行符和回车符</li><li><code>[]</code> 匹配方括号内的任意字符</li><li><code>^</code></li><li><code>{1,2}</code>匹配1-2位字符</li><li><code>(sc)</code> 只匹配和sc相同字符串</li><li><code>|</code> 匹配 <code>|</code> 前后字符</li><li><code>\</code></li><li><code>*</code></li><li><code>+</code></li><li><code>?</code></li></ul><h3 id="修饰语"><a href="#修饰语" class="headerlink" title="修饰语"></a>修饰语</h3><ul><li><code>i</code></li><li><code>g</code></li><li><code>m</code></li></ul><h3 id="字符简写"><a href="#字符简写" class="headerlink" title="字符简写"></a>字符简写</h3><ul><li><code>\w</code> 数字字母或下划线</li><li><code>\W</code> 与上面相反</li><li><code>\s</code> 任意空白符</li><li><code>\S</code></li><li><code>\d</code> 数字</li><li><code>\D</code></li><li><code>\b</code> 单词的边界</li><li><code>\B</code></li></ul><h2 id="Chrome-V8-下的垃圾回收机制"><a href="#Chrome-V8-下的垃圾回收机制" class="headerlink" title="Chrome V8 下的垃圾回收机制"></a>Chrome V8 下的垃圾回收机制</h2><p>自动垃圾回收有很多算法，由于不同对象的生存周期不同，所以无法只用一种回收策略来解决问题，这样效率会很低。</p><p>V8 采用了一种代回收策略，将内存分为和两个生代：<strong>新生代</strong>和<strong>老生代</strong></p><p>新生代中的对象为存活时间较短的对象，老生代中的对象为存活时间较长或常驻内存的对象，分别对新老生代采用不同的垃圾回收算法来提高效率，对象最开始都会先被分配到新生代（如果新生代内存空间不够，直接分配到老生代），新生代中的对象会在满足某些条件后，被移动到老生代，这个过程也叫晋升</p><h3 id="新生代算法"><a href="#新生代算法" class="headerlink" title="新生代算法"></a>新生代算法</h3><p>新生代采用<code>Scavenge</code>垃圾回收算法，在算法实现时主要采用<code>Cheney</code>算法。</p><p>Cheney算法将内存一分为二，叫做semispace，一块处于使用状态（<code>From空间</code>），一块处于闲置状态（<code>To空间</code>）。</p><h4 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h4><p><code>From空间</code>存放活跃对象，判断活跃对象是否有引用，没有的话，回收，有的话将其复制到<code>To空间</code>，清空<code>From空间</code>全部内存，再交换<code>From空间</code>和<code>To空间</code>。并在<code>From空间</code>开始新的分配回收。</p><ul><li>典型的牺牲空间换时间算法，但是恰好适合应用于新生代。</li></ul><h4 id="晋升"><a href="#晋升" class="headerlink" title="晋升"></a>晋升</h4><p>当对象多次复制仍存活，视为长生命周期对象。需要移到老生代中管理。</p><p>晋升的条件</p><ul><li>如果一个对象第二次经历从From到To，则会移到老生代。</li><li>From复制到To时，若To使用超过25%，则该对象直接晋升到老生代。因为完成回收后，To会变成From，进行新的内存分配，如果占比过高，会影响分配。</li></ul><h3 id="老生代"><a href="#老生代" class="headerlink" title="老生代"></a>老生代</h3><p>V8在老生代中主要采用了<code>Mark-Sweep</code>和<code>Mark-Compact</code>相结合的方式进行垃圾回收。</p><h3 id="Mark-Sweep"><a href="#Mark-Sweep" class="headerlink" title="Mark-Sweep"></a><code>Mark-Sweep</code></h3><p><code>Mark-Sweep</code>是标记清除的意思，它分为标记和清除两个阶段。</p><h4 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h4><ol><li>统一标记</li><li>去掉运行和被引用变量的标记</li><li>仍有标记的为待删除标记</li><li>GC完成清除，并回收空间</li></ol><p>但是这个过程会出现内存碎片问题，对后续分配造成影响。</p><p>如果出现需要分配一个大内存，而剩余碎片空间不足分配，则会提前触发不必要的GC</p><h3 id="Mark-Compact"><a href="#Mark-Compact" class="headerlink" title="Mark-Compact"></a><code>Mark-Compact</code></h3><p>为了解决Mark-Sweep的内存碎片问题而出现Mark-Compact</p><p><code>Mark-Compact</code>是标记整理的意思，Mark-Compact在标记完存活对象以后，会将活着的对象向内存空间的一端移动，移动完成后，直接清理掉边界外的所有内存。</p><h4 id="两者结合"><a href="#两者结合" class="headerlink" title="两者结合"></a>两者结合</h4><p>在V8的回收策略中，Mark-Sweep和Mark-Conpact两者是结合使用的。</p><p>由于Mark-Conpact需要移动对象，所以它的执行速度不可能很快，在取舍上，V8主要使用Mark-Sweep，在空间不足以对从新生代中晋升过来的对象进行分配时，才使用Mark-Compact。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS&quot;&gt;&lt;a href=&quot;#JS&quot; class=&quot;headerlink&quot; title=&quot;JS&quot;&gt;&lt;/a&gt;JS&lt;/h1&gt;&lt;h2 id=&quot;typeof&quot;&gt;&lt;a href=&quot;#typeof&quot; class=&quot;headerlink&quot; title=&quot;typeof&quot;&gt;&lt;/a&gt;t
      
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>[小程序]-map组件的使用</title>
    <link href="http://yoursite.com/2019/04/28/%E5%B0%8F%E7%A8%8B%E5%BA%8F-map/"/>
    <id>http://yoursite.com/2019/04/28/小程序-map/</id>
    <published>2019-04-28T01:20:13.000Z</published>
    <updated>2019-04-28T01:30:05.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小程序实现周边美食展示"><a href="#小程序实现周边美食展示" class="headerlink" title="小程序实现周边美食展示"></a>小程序实现周边美食展示</h1><h2 id="map组件"><a href="#map组件" class="headerlink" title="map组件"></a>map组件</h2><h3 id="map常用属性"><a href="#map常用属性" class="headerlink" title="map常用属性"></a>map常用属性</h3><ul><li><code>longitude</code> 经度</li><li><code>laitude</code> 纬度</li><li><code>scale</code> 缩放级别：5~18</li><li><code>markers Array.&lt;marker&gt;</code> 标记点</li><li><code>polyline Array.&lt;polyline&gt;</code> 路线</li><li><code>show-location</code> 显示带有方向的当前定位点</li><li><code>bindregionchange</code> 视野发现变化时出发</li><li><code>bindmarkertap</code> 点击标记点时触发，会返回marker的id</li></ul><blockquote><p>map使用注意事项：</p></blockquote><ol><li>map组件默认层级最高，并且不能设置。</li><li>请勿在 scroll-view 中使用 map 组件</li><li>css 动画对 map 组件无效。</li></ol><h3 id="map上显示其它组件的方法"><a href="#map上显示其它组件的方法" class="headerlink" title="map上显示其它组件的方法"></a>map上显示其它组件的方法</h3><ul><li>设置<code>controls</code>属性（即将废弃，不推荐）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">controls: [&#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    iconPath: <span class="string">'../../images/icon_cate.png'</span>,</span><br><span class="line">    position: &#123;</span><br><span class="line">      left: <span class="number">0</span>,</span><br><span class="line">      top: <span class="number">250</span>,</span><br><span class="line">      width: <span class="number">50</span>,</span><br><span class="line">      height: <span class="number">50</span></span><br><span class="line">    &#125;,</span><br><span class="line">    clickable: <span class="literal">true</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><ul><li>使用<strong>cover-view</strong> 组件</li></ul><h3 id="map代码实例"><a href="#map代码实例" class="headerlink" title="map代码实例"></a>map代码实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">id</span>=<span class="string">"myMap"</span> <span class="attr">show-location</span>=<span class="string">"true"</span> <span class="attr">style</span>=<span class="string">"width: 100%; height:&#123;&#123;height&#125;&#125;px; "</span> <span class="attr">longitude</span>=<span class="string">"&#123;&#123;x&#125;&#125;"</span> <span class="attr">latitude</span>=<span class="string">"&#123;&#123;y&#125;&#125;"</span> <span class="attr">scale</span>=<span class="string">"17"</span> <span class="attr">controls</span>=<span class="string">"&#123;&#123;controls&#125;&#125;"</span>   <span class="attr">bindcontroltap</span>=<span class="string">"code"</span> <span class="attr">bindupdated</span>=<span class="string">"show"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cover-view</span> <span class="attr">class</span>=<span class="string">'btn'</span> <span class="attr">bindtap</span>=<span class="string">'codeg'</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">cover-image</span> <span class="attr">src</span>=<span class="string">'xxx.png'</span> <span class="attr">class</span>=<span class="string">'code'</span>&gt;</span><span class="tag">&lt;/<span class="name">cover-image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cover-view</span> <span class="attr">class</span>=<span class="string">'text'</span>&gt;</span>立即购买<span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>cover-view</code>：</li></ul><blockquote><p><code>VM5041:5 &lt;cover-view/&gt; 内只能嵌套 &lt;cover-view/&gt; &lt;cover-image/&gt; &lt;button/&gt; &lt;navigator/&gt; &lt;ad/&gt;,其它组件在真机上会被忽略</code></p></blockquote><h2 id="map使用中的问题"><a href="#map使用中的问题" class="headerlink" title="map使用中的问题"></a>map使用中的问题</h2><h3 id="marker数组中设置callout气泡"><a href="#marker数组中设置callout气泡" class="headerlink" title="marker数组中设置callout气泡"></a>marker数组中设置callout气泡</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">callout: &#123;</span><br><span class="line">    content: res.data[i].title,</span><br><span class="line">    color: <span class="string">"#2c8df6"</span>,</span><br><span class="line">    fontSize: <span class="number">16</span>,</span><br><span class="line">    borderRadius: <span class="number">10</span>,</span><br><span class="line">    bgColor: <span class="string">"#ffffff"</span>, <span class="comment">//color&amp;bgColor都是用6位数字</span></span><br><span class="line">    display: <span class="string">"ALWAYS"</span>,</span><br><span class="line">    boxShadow: <span class="string">"2px 2px 10px #aaa"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何设置地图全屏显示（默认满屏为100vh）"><a href="#如何设置地图全屏显示（默认满屏为100vh）" class="headerlink" title="如何设置地图全屏显示（默认满屏为100vh）"></a>如何设置地图全屏显示（默认满屏为100vh）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.myMap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将地图中心点移动到当前位置"><a href="#将地图中心点移动到当前位置" class="headerlink" title="将地图中心点移动到当前位置"></a>将地图中心点移动到当前位置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onReady: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用 wx.createMapContext 获取 map 上下文</span></span><br><span class="line">    <span class="keyword">this</span>.mapCtx = wx.createMapContext(<span class="string">'map'</span>)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 将地图中心移动到当前位置</span></span><br><span class="line">moveToLocation: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mapCtx.moveToLocation()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="滑动地图，动态获取地图中心点位置"><a href="#滑动地图，动态获取地图中心点位置" class="headerlink" title="滑动地图，动态获取地图中心点位置"></a>滑动地图，动态获取地图中心点位置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>.mapCtx.getCenterLocation(&#123;</span><br><span class="line">      success(res) &#123;</span><br><span class="line">        that.data.latitude = res.latitude;</span><br><span class="line">        that.data.longitude = res.longitude;</span><br><span class="line">        that.data.start = res.latitude + <span class="string">","</span> + res.longitude;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="根据关键词，获取指定周边"><a href="#根据关键词，获取指定周边" class="headerlink" title="根据关键词，获取指定周边"></a>根据关键词，获取指定周边</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">qmapsdk = <span class="keyword">new</span> QQMapWX(&#123;</span><br><span class="line">    key: <span class="string">'VDJBZ-HKGWI-2D3GL-5YBEH-UCG4O-NTFH5'</span></span><br><span class="line">&#125;);</span><br><span class="line">qmapsdk.search(&#123;</span><br><span class="line">    keyword: <span class="string">'美食'</span>,  <span class="comment">//搜索关键词</span></span><br><span class="line">    location: _this.data.start,  <span class="comment">//设置周边搜索中心点</span></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123; <span class="comment">//搜索成功后的回调</span></span><br><span class="line">      <span class="keyword">var</span> mks = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; res.data.length; i++) &#123;</span><br><span class="line">        mks.push(&#123; <span class="comment">// 获取返回结果，放到mks数组中</span></span><br><span class="line">          title: res.data[i].title,</span><br><span class="line">          id: res.data[i].id,</span><br><span class="line">          latitude: res.data[i].location.lat,</span><br><span class="line">          longitude: res.data[i].location.lng,</span><br><span class="line">          iconPath: <span class="string">'http://www.daigua.com/wxmap/images/marker.png'</span>, <span class="comment">//图标路径</span></span><br><span class="line">          width: <span class="number">20</span>,</span><br><span class="line">          height: <span class="number">20</span>,</span><br><span class="line">          callout: &#123;</span><br><span class="line">            content: res.data[i].title,</span><br><span class="line">            color: <span class="string">"#2c8df6"</span>,</span><br><span class="line">            fontSize: <span class="number">16</span>,</span><br><span class="line">            borderRadius: <span class="number">10</span>,</span><br><span class="line">            bgColor: <span class="string">"#ffffff"</span>,</span><br><span class="line">            display: <span class="string">"ALWAYS"</span>,</span><br><span class="line">            boxShadow: <span class="string">"2px 2px 10px #aaa"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          label: &#123;</span><br><span class="line">            color: <span class="string">"#000"</span>,</span><br><span class="line">            fontSize: <span class="number">12</span>,</span><br><span class="line">            content: res.data[i].address,</span><br><span class="line">            x: res.data[i].location.lng,</span><br><span class="line">            y: res.data[i].location.lat</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 更新坐标时候的问题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">地图marker的坐标如果想通过JS修改，光修改绑定坐标数据是无效的，必须通过小程序的地图组件控制接口wx.createMapContext，用translateMarker方法修改标记坐标才行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+ 真机测试的时候，`</span><span class="string">`polyline`</span><span class="string">`显示不了的问题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 给map地图添加input输入框</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt; 真机上，原生组件map层级最高，暂时不支持`</span><span class="string">`cover-input`</span><span class="string">`。</span></span><br><span class="line"><span class="string">但是input框的焦点能够获取，因此我们可以通过覆盖一个相同大小的`</span><span class="string">`cover-view`</span><span class="string">`，把输入的文字重新绑定给`</span><span class="string">`cover-view`</span><span class="string">`显示出来。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 引申</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+ 计算两个点之间的距离</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">var</span> EARTH_RADIUS = <span class="number">6378.137</span>; <span class="comment">//地球半径</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rad</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> d * <span class="built_in">Math</span>.PI / <span class="number">180.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDistance</span>(<span class="params">lng1, lat1, lng2, lat2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> radLat1 = rad(lat1);</span><br><span class="line">  <span class="keyword">var</span> radLat2 = rad(lat2);</span><br><span class="line">  <span class="keyword">var</span> a = radLat1 - radLat2;</span><br><span class="line">  <span class="keyword">var</span> b = rad(lng1) - rad(lng2);</span><br><span class="line">  <span class="keyword">var</span> s = <span class="number">2</span> * <span class="built_in">Math</span>.asin(<span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.pow(<span class="built_in">Math</span>.sin(a / <span class="number">2</span>), <span class="number">2</span>)</span><br><span class="line">    + <span class="built_in">Math</span>.cos(radLat1) * <span class="built_in">Math</span>.cos(radLat2)</span><br><span class="line">    * <span class="built_in">Math</span>.pow(<span class="built_in">Math</span>.sin(b / <span class="number">2</span>), <span class="number">2</span>)));</span><br><span class="line">  s = s * EARTH_RADIUS;</span><br><span class="line">  s = <span class="built_in">Math</span>.round(s * <span class="number">10000</span>) / <span class="number">10000</span>;</span><br><span class="line">  <span class="keyword">return</span> s;<span class="comment">//返回数值单位：公里</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取商家手机号码，并打开手机拨打界面</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx.makePhoneCall(&#123;</span><br><span class="line">      phoneNumber: <span class="string">'15218966603'</span>,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"成功拨打电话"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>获取路线轨迹（polyline的使用）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">polyline: [&#123;</span><br><span class="line">    points: [</span><br><span class="line">        &#123;<span class="attr">latitude</span>: <span class="number">23.129</span>,<span class="attr">longitude</span>: <span class="number">113.064</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">latitude</span>: <span class="number">23.26437</span>,<span class="attr">longitude</span>: <span class="number">113.129</span>&#125;</span><br><span class="line">    ],</span><br><span class="line">    color: <span class="string">"#ff6600"</span>,</span><br><span class="line">    width: <span class="number">6</span>,</span><br><span class="line">    dottedLine: <span class="literal">true</span>,</span><br><span class="line">    arrowLine: <span class="literal">true</span>,</span><br><span class="line">    borderColor: <span class="string">"#000"</span>,</span><br><span class="line">    borderWidth: <span class="number">5</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;小程序实现周边美食展示&quot;&gt;&lt;a href=&quot;#小程序实现周边美食展示&quot; class=&quot;headerlink&quot; title=&quot;小程序实现周边美食展示&quot;&gt;&lt;/a&gt;小程序实现周边美食展示&lt;/h1&gt;&lt;h2 id=&quot;map组件&quot;&gt;&lt;a href=&quot;#map组件&quot; class
      
    
    </summary>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>[JS]-单线程及异步</title>
    <link href="http://yoursite.com/2019/04/23/js-%E5%8D%95%E7%BA%BF%E7%A8%8B%E5%8F%8A%E5%BC%82%E6%AD%A5/"/>
    <id>http://yoursite.com/2019/04/23/js-单线程及异步/</id>
    <published>2019-04-23T08:54:54.000Z</published>
    <updated>2019-04-23T15:11:18.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS的主线程及执行栈"><a href="#JS的主线程及执行栈" class="headerlink" title="JS的主线程及执行栈"></a>JS的主线程及执行栈</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>JS是一门单线程语言，那为何能够实现异步操作呢？</p></blockquote><p>单线程和异步操作确实不能同时成为一个语言的特性。JS本身不能实现异步，但是JS的<strong>宿主环境</strong>（浏览器，Node）是多线程的，宿主环境通过某种方式，使得JS具备了异步的特性。</p><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>JS是单线程语言，浏览器只分配给JS一个主线程，用来执行任务（函数），但一次只能执行一个任务，这些任务形成一个任务队列排队等候执行，但前端的某些任务是非常耗时的，比如网络请求，定时器和事件监听，如果让他们和别的任务一样，都老老实实的排队等待执行的话，执行效率会非常的低，甚至导致页面的假死。</p><blockquote><p>浏览器为这些<strong>耗时任务</strong>开辟了另外的线程，主要包括<strong>http请求线程</strong>，<strong>浏览器定时触发器</strong>，<strong>浏览器事件触发线程</strong>，这些任务是异步的。</p></blockquote><h2 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h2><p>浏览器为这些异步任务单独开了一个线程，那么主线程是如何知道异步任务是否已经完成呢？这就需要依赖<strong>回调函数</strong>了，整个程序是靠事件驱动的，每个事件都有相应的回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'time up);</span></span><br><span class="line"><span class="string">&#125;,50)</span></span><br></pre></td></tr></table></figure><h2 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h2><blockquote><p>JS一直在做一个工作，就是从任务队列里提取任务，放到主线程里执行。</p></blockquote><p><img src="https://raw.githubusercontent.com/bpgg/bpgg.github.io/master/img/event_loop.png" alt="event loop"></p><ul><li>浏览器为异步任务开启的线程序=&gt;WebAPIs</li><li>任务队列=&gt;callback queue</li><li>主线程<ul><li>堆和栈</li><li>函数的执行就是通过进栈和出栈实现</li><li>栈stack清空时，说明一个任务已经执行完成，这时会从<code>callback queue</code>中寻找下一个任务推入栈中</li></ul></li></ul><h2 id="容易困惑的问题"><a href="#容易困惑的问题" class="headerlink" title="容易困惑的问题"></a>容易困惑的问题</h2><h3 id="setTimeout-f1-0-是否立即执行"><a href="#setTimeout-f1-0-是否立即执行" class="headerlink" title="setTimeout(f1,0)是否立即执行"></a><code>setTimeout(f1,0)</code>是否立即执行</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// output =&gt; 2,1</span></span><br></pre></td></tr></table></figure><p>当执行setTimeout后，浏览器会立即把匿名函数放入<code>callback queue</code>中，等待主线程的召唤，因为此时的stack还有<code>console.log(2)</code>尚未执行。等<code>console.log(2)</code>执行完毕后，才通过<code>event loop</code>把匿名函数放到stack中执行。</p><ul><li><p>结论：</p><ul><li><code>setTimeout(f1,0)</code>并非无意义，若f1是比较耗时的任务，又不在WebAPIs中，那就可以把它放到<code>callback queue</code>，等待主线程执行完毕后再执行。</li><li>若当前代码执行时间很长，没有办法保证回调函数一定会在setTimeout指定的时间内完成。</li></ul></li><li><p>补充说明：</p><ul><li>HTML5标准规定了setTimeout()的第二个参数的最小值（最短间隔），不得低于4毫秒，如果低于这个值，就会自动增加。在此之前，老版本的浏览器都将最短间隔设为10毫秒。</li><li>DOM的变动（尤其是涉及页面重新渲染的部分），通常不会立即执行，而是每16毫秒执行一次。这时使用<code>requestAnimationFrame()</code>的效果要好于<code>setTimeout()</code></li></ul></li></ul><h2 id="浏览器异步机制的使用"><a href="#浏览器异步机制的使用" class="headerlink" title="浏览器异步机制的使用"></a>浏览器异步机制的使用</h2><ul><li>当我们自己需要写的程序中也有比较耗时的函数。可以通过浏览器提供给我们的<strong>浏览器定时事件</strong>和<strong>事件触发线程</strong>。</li></ul><h2 id="异步的好处和使用场景"><a href="#异步的好处和使用场景" class="headerlink" title="异步的好处和使用场景"></a>异步的好处和使用场景</h2><ul><li><p>异步的好处</p><ul><li>同步执行</li></ul><p><img src="https://raw.githubusercontent.com/bpgg/bpgg.github.io/master/img/syncronous_exectuion.png" alt="同步与异步的对比"></p><ul><li>异步执行</li></ul><p><img src="https://raw.githubusercontent.com/bpgg/bpgg.github.io/master/img/asyncronous_exectuion.png" alt="同步与异步的对比"></p></li><li><p>使用场景</p></li></ul><p>程序需要大量I/O操作和用户请求时</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS的主线程及执行栈&quot;&gt;&lt;a href=&quot;#JS的主线程及执行栈&quot; class=&quot;headerlink&quot; title=&quot;JS的主线程及执行栈&quot;&gt;&lt;/a&gt;JS的主线程及执行栈&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[webpack]-基础知识及配置</title>
    <link href="http://yoursite.com/2019/04/17/webpack-%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/04/17/webpack-基础/</id>
    <published>2019-04-17T08:48:59.000Z</published>
    <updated>2019-04-23T10:37:49.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack-4-x的使用"><a href="#webpack-4-x的使用" class="headerlink" title="webpack 4.x的使用"></a>webpack 4.x的使用</h1><ul><li><p>需要安装</p><ul><li>webpack</li><li>webpack-cli</li></ul></li><li><p>基本使用</p></li></ul><blockquote><p>webpack a.js -o b.js</p></blockquote><h2 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">3000</span>,</span><br><span class="line">        progress: <span class="literal">true</span>,</span><br><span class="line">        contentBase: <span class="string">'./dist'</span>, <span class="comment">//默认打开哪个目录</span></span><br><span class="line">        compress: <span class="literal">true</span></span><br><span class="line">        open:<span class="literal">true</span> </span><br><span class="line">    &#125;,</span><br><span class="line">    entry: path.join(__dirname, <span class="string">"./src/main.js"</span>),  </span><br><span class="line">    output: &#123;                                      </span><br><span class="line">        path: path.join(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    mode: <span class="string">'development'</span>,   <span class="comment">// 'produciton'</span></span><br><span class="line"></span><br><span class="line">    plugins: [  <span class="comment">//放置所有插件</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">            filename: <span class="string">'index.html'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="built_in">module</span>: &#123;   <span class="comment">//解析文件的loader，使用loader解析更高级的语法和其他语言特性</span></span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        presets: [</span><br><span class="line">                            <span class="string">'@babel/preset-env'</span></span><br><span class="line">                        ],</span><br><span class="line">                        plugins: [</span><br><span class="line">                            [<span class="string">"@babel/plugin-proposal-decorators"</span>, &#123; <span class="string">"legacy"</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">                            [<span class="string">"@babel/plugin-proposal-class-properties"</span>, &#123; <span class="string">"loose"</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">                            [<span class="string">"@babel/plugin-transform-runtime"</span>]</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,                  <span class="comment">//规定不解析该目录下的js文件</span></span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'css-loader'</span>,</span><br><span class="line">                    <span class="comment">//'postcss-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'css-loader'</span>,</span><br><span class="line">                    <span class="string">'less-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimizer: [</span><br><span class="line">            <span class="keyword">new</span> OptimizeCss(),</span><br><span class="line">            <span class="keyword">new</span> UgliyfyJsPlugin(&#123;</span><br><span class="line">                cache: <span class="literal">true</span>,</span><br><span class="line">                parallel: <span class="literal">true</span>, <span class="comment">//并行压缩</span></span><br><span class="line">                sourceMap: <span class="literal">true</span> <span class="comment">//源码映射</span></span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><ul><li>配置运行的脚本命令，使用<code>npm run dev</code>执行对应命令</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>:&#123;</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"webpack --config webpack.config.js"</span>,</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack中常用插件"><a href="#webpack中常用插件" class="headerlink" title="webpack中常用插件"></a>webpack中常用插件</h2><ul><li>打包html模板</li></ul><blockquote><p><code>html-webpack-plugin</code></p></blockquote><ul><li><p>解析文件的loader</p><ul><li>解析css,style,less等</li><li>给css增加浏览器的前缀 <code>postcss-loader</code>，需要配置<code>postcss.config.js</code></li><li>解析高级js语法的<code>babel-loader</code>，还需要<code>@babel/core</code>,<code>@babel/preset-env</code>等</li><li>代码校验： <code>eslint-loader</code></li><li>解析css中出现的url：<code>url-loader</code>，<code>file-loader</code></li></ul></li><li><p>压缩css文件</p></li></ul><blockquote><p><code>optimize-css-assets-webpack-plugin</code> 使用之后js便不会压缩，需要安装<code>uglifyjs-webpack-plugin</code></p></blockquote><ul><li><p>源码映射 <code>source-map</code></p></li><li><p>实时打包 <code>watch</code></p></li><li><p>其他插件</p><ul><li><code>clean-webpack-plugin</code> 每次build的时候，重置dist</li><li><code>copy-webpack-plugin</code>  复制一些其他类型的文件到dist，txt等</li><li><code>banner-plugin</code> 版权声明，再生成的js文件中添加自定义版权信息</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;webpack-4-x的使用&quot;&gt;&lt;a href=&quot;#webpack-4-x的使用&quot; class=&quot;headerlink&quot; title=&quot;webpack 4.x的使用&quot;&gt;&lt;/a&gt;webpack 4.x的使用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;需要安装&lt;/p&gt;
&lt;ul&gt;
      
    
    </summary>
    
    
      <category term="wenpack" scheme="http://yoursite.com/tags/wenpack/"/>
    
  </entry>
  
  <entry>
    <title>axios</title>
    <link href="http://yoursite.com/2019/04/10/vue-axios/"/>
    <id>http://yoursite.com/2019/04/10/vue-axios/</id>
    <published>2019-04-10T12:50:55.000Z</published>
    <updated>2019-04-10T12:50:55.387Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>同源策略,跨域解决</title>
    <link href="http://yoursite.com/2019/04/07/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/04/07/跨域问题/</id>
    <published>2019-04-07T08:49:38.000Z</published>
    <updated>2019-04-23T10:43:45.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器同源策略-及跨域资源的解决方法"><a href="#浏览器同源策略-及跨域资源的解决方法" class="headerlink" title="浏览器同源策略,及跨域资源的解决方法"></a>浏览器同源策略,及跨域资源的解决方法</h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><ul><li><p>源: 服务器</p></li><li><p>同源 =&gt; 域名,协议,端口 一致</p></li></ul><h2 id="同源策略分类"><a href="#同源策略分类" class="headerlink" title="同源策略分类"></a>同源策略分类</h2><ul><li><p>DOM同源策略: 禁止对不同源页面进行DOM操作</p></li><li><p>XMLHttpRequest同源策略 : 禁止xhr对象向不同源服务器发起http请求. </p></li></ul><h2 id="跨域的解决方法"><a href="#跨域的解决方法" class="headerlink" title="跨域的解决方法"></a>跨域的解决方法</h2><h3 id="CORS跨域"><a href="#CORS跨域" class="headerlink" title="CORS跨域"></a>CORS跨域</h3><ul><li>CORS [ Cross-origin resource sharing ], 定义在跨域时,浏览器和服务器应该如何沟通, 通过自定义的Http, 决定请求响应是否成功. 只要服务器实现CROS接口, 就可以跨域通信.</li></ul><h4 id="CORS分类"><a href="#CORS分类" class="headerlink" title="CORS分类"></a>CORS分类</h4><ul><li>简单请求<ul><li>请求方法:<ul><li>HEAD</li><li>GET</li><li>POST</li></ul></li><li>请求字段:<ol><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type:  <code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code>, <code>text/plain</code></li></ol></li></ul></li><li>非简单请求</li></ul><h3 id="JSONP跨域"><a href="#JSONP跨域" class="headerlink" title="JSONP跨域"></a>JSONP跨域</h3><ul><li><p>因为浏览器的安全性限制, 不允许ajax进行跨域(不同域名/不同端口/不同协议…)访问</p></li><li><p>通过动态创建script标签, 实现跨域, src指向数据的接口地址=&gt;只支持get方法</p></li></ul><h4 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h4><ol><li><p>客户端定义回调方法, 预定义数据操作</p></li><li><p>将回调方法的名称, 以URL传参, 提交至服务器数据接口</p></li><li><p>服务器组装好要发送的数据, 结合客户端传来的方法名, 拼接成调用方法的字符串, 发送给客户端解析</p></li><li><p>客户端把收到的字符串以script脚本解析执行</p></li></ol><h3 id="其他跨域解决方法"><a href="#其他跨域解决方法" class="headerlink" title="其他跨域解决方法"></a>其他跨域解决方法</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;浏览器同源策略-及跨域资源的解决方法&quot;&gt;&lt;a href=&quot;#浏览器同源策略-及跨域资源的解决方法&quot; class=&quot;headerlink&quot; title=&quot;浏览器同源策略,及跨域资源的解决方法&quot;&gt;&lt;/a&gt;浏览器同源策略,及跨域资源的解决方法&lt;/h1&gt;&lt;h2 id=&quot;同
      
    
    </summary>
    
    
      <category term="Http" scheme="http://yoursite.com/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>VSCode中快速创建自定义模板</title>
    <link href="http://yoursite.com/2019/04/06/vscode-%E7%94%9F%E6%88%90%E6%A8%A1%E6%9D%BF/"/>
    <id>http://yoursite.com/2019/04/06/vscode-生成模板/</id>
    <published>2019-04-06T02:06:43.000Z</published>
    <updated>2019-04-23T10:35:33.237Z</updated>
    
    <content type="html"><![CDATA[<h3 id="以创建vue的html模板为例"><a href="#以创建vue的html模板为例" class="headerlink" title="以创建vue的html模板为例"></a>以创建vue的html模板为例</h3><blockquote><p>在html.json模板下编写</p></blockquote><ol><li><p>在VS Code 中找到设置 -&gt; 用户代码片段, 在输入框内输入 html, 选择html.json/html</p></li><li><p>编写自定义模板, 保存</p><ol><li>基本的html框架</li><li>script中vue的路径配置</li><li>基本的vue代码</li></ol></li></ol><blockquote><p><strong>模板如下</strong></p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">"Html5-Vue": &#123;</span><br><span class="line">"prefix": "vue",</span><br><span class="line">"body": [</span><br><span class="line">  "&lt;!DOCTYPE html&gt;",</span><br><span class="line">  "&lt;html lang=\"zh-CN\"&gt;\n",</span><br><span class="line">  "&lt;head&gt;",</span><br><span class="line">  "\t&lt;meta charset=\"UTF-8\"&gt;",</span><br><span class="line">  "\t&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"&gt;",</span><br><span class="line">  "\t&lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;",</span><br><span class="line">  "\t&lt;title&gt;Document&lt;/title&gt;",</span><br><span class="line">  "\t&lt;script src=\"../lib/vue-2.6.10/vue.js\"&gt;&lt;/script&gt;",</span><br><span class="line">  "&lt;/head&gt;\n",</span><br><span class="line">  "&lt;body&gt;",</span><br><span class="line">  "\t&lt;div id=\"app\"&gt;$1&lt;/div&gt;\n",</span><br><span class="line">  "\t&lt;script&gt;",</span><br><span class="line">  "\t\tvar vm = new Vue(&#123;",</span><br><span class="line">  "\t\t\tel: '#app',",</span><br><span class="line">  "\t\t\tdata: &#123;&#125;,",</span><br><span class="line">  "\t\t\tmethods: &#123;&#125;",</span><br><span class="line">  "\t\t&#125;);",</span><br><span class="line">  "\t&lt;/script&gt;",</span><br><span class="line">  "&lt;/body&gt;\n",</span><br><span class="line">  <span class="string">"&lt;/html&gt;"</span></span><br><span class="line">],</span><br><span class="line">"description": "快速创建在html5编写的vue模板"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建一个html文件, 输入vue 回车生成自定义模板.</li></ol><h3 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h3><ul><li><p>“prefix” : 触发模板的关键字</p></li><li><p>模板都在”body”:[ ]中编写</p><ul><li>每行模板都用双引号</li><li>双引号中的双引号需要转义</li><li>$1 表示光标</li></ul></li><li><p>不能覆盖json文件自带的 { }</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;以创建vue的html模板为例&quot;&gt;&lt;a href=&quot;#以创建vue的html模板为例&quot; class=&quot;headerlink&quot; title=&quot;以创建vue的html模板为例&quot;&gt;&lt;/a&gt;以创建vue的html模板为例&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在html
      
    
    </summary>
    
    
      <category term="VSCode" scheme="http://yoursite.com/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>[HTML]-Label标签</title>
    <link href="http://yoursite.com/2019/04/02/html-label-for/"/>
    <id>http://yoursite.com/2019/04/02/html-label-for/</id>
    <published>2019-04-02T06:27:42.000Z</published>
    <updated>2019-04-23T09:02:54.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Label标签"><a href="#Label标签" class="headerlink" title="Label标签"></a>Label标签</h2><h3 id="for属性的介绍"><a href="#for属性的介绍" class="headerlink" title="for属性的介绍"></a>for属性的介绍</h3><ul><li><p>\<label>专为input元素服务, 为其定义标记</label></p></li><li><p>for属性规定label与哪个表单元素绑定</p></li></ul><h3 id="label和表单控件绑定方式"><a href="#label和表单控件绑定方式" class="headerlink" title="label和表单控件绑定方式"></a>label和表单控件绑定方式</h3><ul><li>隐式绑定 : 将表单控件作为label的内容</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">id</span>=<span class="string">'un'</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>显示绑定 :</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">'un'</span>&gt;</span>username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">id</span>=<span class="string">'un'</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="为啥要添加for属性呢"><a href="#为啥要添加for属性呢" class="headerlink" title="为啥要添加for属性呢?"></a>为啥要添加for属性呢?</h3><ul><li><p>提高鼠标用户的体验</p></li><li><p>在label元素内点击文本,会触发此控件.</p></li></ul><h3 id="Label-for的具体应用"><a href="#Label-for的具体应用" class="headerlink" title="Label-for的具体应用"></a>Label-for的具体应用</h3><blockquote><p>简单应用</p></blockquote> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"male"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span>Female<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"female"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"jk"</span>&gt;</span>计科 : <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"major"</span> <span class="attr">id</span>=<span class="string">"jk"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"rg"</span>&gt;</span>软工 : <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"major"</span> <span class="attr">id</span>=<span class="string">"rg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>纯CSS实现幻灯片</p></blockquote><ul><li>CSS代码</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">     <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[name='pic']</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">999px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked+img</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>HTML代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">'pic'</span> <span class="attr">checked</span> <span class="attr">id</span>=<span class="string">'pic1'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./pic1.jpg"</span> <span class="attr">alt</span>=<span class="string">"pic1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">'pic'</span> <span class="attr">id</span>=<span class="string">'pic2'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./pic2.jpg"</span> <span class="attr">alt</span>=<span class="string">"pic2"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pic1"</span>&gt;</span>图片1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pic2"</span>&gt;</span>图片2<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Label标签&quot;&gt;&lt;a href=&quot;#Label标签&quot; class=&quot;headerlink&quot; title=&quot;Label标签&quot;&gt;&lt;/a&gt;Label标签&lt;/h2&gt;&lt;h3 id=&quot;for属性的介绍&quot;&gt;&lt;a href=&quot;#for属性的介绍&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>[PHP]-获取上传的文件并保存</title>
    <link href="http://yoursite.com/2019/04/02/php-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://yoursite.com/2019/04/02/php-文件上传/</id>
    <published>2019-04-02T05:27:46.000Z</published>
    <updated>2019-04-23T10:31:30.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端代码界面"><a href="#前端代码界面" class="headerlink" title="前端代码界面"></a>前端代码界面</h3><ul><li><strong>注意:</strong> 上传文件格式: enctype=”multipart/form-data”</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"upload_file.php"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"file"</span>&gt;</span>Filename:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"myFiles[]"</span> <span class="attr">id</span>=<span class="string">"file1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"myFiles[]"</span> <span class="attr">id</span>=<span class="string">"file2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="PHP服务器代码"><a href="#PHP服务器代码" class="headerlink" title="PHP服务器代码"></a>PHP服务器代码</h3><h4 id="修改文件名-便于整理"><a href="#修改文件名-便于整理" class="headerlink" title="修改文件名,便于整理"></a>修改文件名,便于整理</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取文件后缀</span></span><br><span class="line">$suffix =  substr($file_name,strrpos($file_name,<span class="string">'.'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.生成独一无二的时间+随机数并组合</span></span><br><span class="line">$newFileNme = date(<span class="string">'Ymdhis'</span>,time()).rand().$suffix;</span><br></pre></td></tr></table></figure><h4 id="上传多个文件时-存于数组-便于操作"><a href="#上传多个文件时-存于数组-便于操作" class="headerlink" title="上传多个文件时,存于数组,便于操作."></a>上传多个文件时,存于数组,便于操作.</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将获取的文件对象以数组形式保存</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reArrayFiles</span><span class="params">(&amp;$file_post)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    $file_ary = <span class="keyword">array</span>();</span><br><span class="line">    $file_count = count($file_post[<span class="string">'name'</span>]);</span><br><span class="line">    $file_keys = array_keys($file_post);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ($i=<span class="number">0</span>; $i&lt;$file_count; $i++) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($file_keys <span class="keyword">as</span> $key) &#123;</span><br><span class="line">            $file_ary[$i][$key] = $file_post[$key][$i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $file_ary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_FILES[<span class="string">'myFiles'</span>]) &#123;</span><br><span class="line">    $file_ary = reArrayFiles($_FILES[<span class="string">'myFiles'</span>]);</span><br><span class="line">     <span class="comment">//遍历获取的文件</span></span><br><span class="line">    <span class="keyword">foreach</span> ($file_ary <span class="keyword">as</span> $file) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'File Name: '</span> . $file[<span class="string">'name'</span>].<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'File Type: '</span> . $file[<span class="string">'type'</span>].<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'File Size: '</span> . $file[<span class="string">'size'</span>].<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'File Size: '</span> . $file[<span class="string">'tmp_name'</span>].<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存文件到指定的目录</span></span><br><span class="line">        <span class="comment">//1.如果不将临时文件保存,临时文件会自动删除</span></span><br><span class="line">        <span class="comment">//2.临时文件存放目录在php.ini中定义</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (file_exists(<span class="string">"upload/"</span> . $file[<span class="string">'name'</span>]))&#123;</span><br><span class="line">            <span class="keyword">echo</span> $file[<span class="string">'name'</span>] . <span class="string">" already exists. "</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            move_uploaded_file($file[<span class="string">'name'</span>],<span class="string">"upload/"</span> . $file[<span class="string">'tmp_name'</span>]);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Stored in: "</span> . <span class="string">"upload/"</span> .$file[<span class="string">'name'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前端代码界面&quot;&gt;&lt;a href=&quot;#前端代码界面&quot; class=&quot;headerlink&quot; title=&quot;前端代码界面&quot;&gt;&lt;/a&gt;前端代码界面&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注意:&lt;/strong&gt; 上传文件格式: enctype=”multipart/
      
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>[DB]-数据库设计</title>
    <link href="http://yoursite.com/2019/04/01/mysql-%E5%88%9B%E5%BB%BA%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/04/01/mysql-创建表/</id>
    <published>2019-04-01T09:55:32.000Z</published>
    <updated>2019-04-23T09:19:10.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库设计简介"><a href="#数据库设计简介" class="headerlink" title="数据库设计简介"></a>数据库设计简介</h2><ul><li><p><strong>六个阶段</strong></p><ul><li>系统需求分析</li><li>概念结构设计</li><li>逻辑结构设计</li><li>物理结构设计</li><li>数据库的实施</li><li>数据库的运行与维护</li></ul></li></ul><h2 id="系统需求分析"><a href="#系统需求分析" class="headerlink" title="系统需求分析"></a>系统需求分析</h2><h3 id="1-需求分析的任务"><a href="#1-需求分析的任务" class="headerlink" title="1.需求分析的任务"></a>1.需求分析的任务</h3><p>通过详细调查现实世界要处理的对象 (组织,部门,企业等), 充分了解原系统的工作概况(手工系统或计算机系统), 明确用户的各种需求, 然后在此基础上确定新系统的功能.</p><ul><li>调查重点<ul><li>信息要求, 用户需要获取的数据</li><li>处理要求, 用户要完成那些数据处理功能</li><li>安全性和完整性要求</li></ul></li></ul><h3 id="2-需求分析的方法"><a href="#2-需求分析的方法" class="headerlink" title="2.需求分析的方法"></a>2.需求分析的方法</h3><ul><li>跟班作业</li><li>询问</li><li>设计用户调查表</li><li>查阅记录, 查阅与原系统有关的数据记录</li></ul><h2 id="概念结构设计"><a href="#概念结构设计" class="headerlink" title="概念结构设计"></a>概念结构设计</h2><h3 id="1-概念结构设计简介"><a href="#1-概念结构设计简介" class="headerlink" title="1.概念结构设计简介"></a>1.概念结构设计简介</h3><blockquote><p>从需求分析中找到实体，确认实体的属性、确认实体的关系，画出ER图。</p></blockquote><h3 id="2-概念设计结构步骤"><a href="#2-概念设计结构步骤" class="headerlink" title="2.概念设计结构步骤"></a>2.概念设计结构步骤</h3><blockquote><p>需求分析数据–&gt;局部ER图–&gt;全局ER图</p></blockquote><ul><li>合并局部ER图的关键是消除冲突<ul><li>属性冲突</li><li>命名冲突</li><li>结构冲突</li></ul></li></ul><h2 id="逻辑结构设计"><a href="#逻辑结构设计" class="headerlink" title="逻辑结构设计"></a>逻辑结构设计</h2><h3 id="1-逻辑结构简介"><a href="#1-逻辑结构简介" class="headerlink" title="1.逻辑结构简介"></a>1.逻辑结构简介</h3><blockquote><p>目的是将E-R图中的实体、属性和联系转换成为关系模式。</p></blockquote><h3 id="2-初始关系模型设计"><a href="#2-初始关系模型设计" class="headerlink" title="2.初始关系模型设计"></a>2.初始关系模型设计</h3><h4 id="实体间关系转换的原则"><a href="#实体间关系转换的原则" class="headerlink" title="实体间关系转换的原则"></a>实体间关系转换的原则</h4><ul><li><p>一个实体转换为一个关系模式,实体的属性就是关系的属性,实体的键就是关系的键.</p></li><li><p>一个联系转为一个关系模式,与该联系相连的实体以及联系的属性都是该关系的属性.</p><ul><li>关系的键有三种情况:<ul><li>联系1:1,每个实体的键都是关系的候选键</li><li>联系1:n,则n端实体的键为关系的键</li><li>联系n:m,则各实体键的组合为关系的键</li></ul></li></ul></li><li>三个或三个实体的多元联系的码是各实体的码组成的关系码或者关系码的一部分</li><li>具有相同码的关系模式可以合并</li></ul><h4 id="实体间关系转换的规则"><a href="#实体间关系转换的规则" class="headerlink" title="实体间关系转换的规则"></a>实体间关系转换的规则</h4><ul><li>一个1:1的关系可以转换为一个独立的关系模式,也可以与任意一端对应关系模式合并.</li></ul><h3 id="3-关系模式规范化"><a href="#3-关系模式规范化" class="headerlink" title="3.关系模式规范化"></a>3.关系模式规范化</h3><h4 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h4><ul><li><p>1NF: 属性不可再分</p></li><li><p>2NF: 在1NF基础上, 每一个非主属性完全函数依赖于<strong>任何</strong>一个候选码<br><br>( 每个表只描述一件事,每条记录有唯一标识列 )</p></li><li><p>3NF: 在2NF基础上, 每一个非主属性既不<strong>传递依赖</strong>与码,也不<strong>部分依赖</strong>于码. <br><br>( 数据库表不包含已在其它表中存在的非主属性 )</p></li></ul><h2 id="物理结构设计"><a href="#物理结构设计" class="headerlink" title="物理结构设计"></a>物理结构设计</h2><h3 id="1-物理结构设计简介"><a href="#1-物理结构设计简介" class="headerlink" title="1.物理结构设计简介"></a>1.物理结构设计简介</h3><blockquote><p>给逻辑模型, 选取最合适应用环境的物理结构</p></blockquote><h3 id="2-确定物理结构"><a href="#2-确定物理结构" class="headerlink" title="2.确定物理结构"></a>2.确定物理结构</h3><h4 id="存储结构的设计"><a href="#存储结构的设计" class="headerlink" title="存储结构的设计"></a>存储结构的设计</h4><h4 id="数据存取路径的设计"><a href="#数据存取路径的设计" class="headerlink" title="数据存取路径的设计"></a>数据存取路径的设计</h4><h4 id="数据存放位置的设计"><a href="#数据存放位置的设计" class="headerlink" title="数据存放位置的设计"></a>数据存放位置的设计</h4><h4 id="系统配置的设计"><a href="#系统配置的设计" class="headerlink" title="系统配置的设计"></a>系统配置的设计</h4><h3 id="3-评价物理结构"><a href="#3-评价物理结构" class="headerlink" title="3.评价物理结构"></a>3.评价物理结构</h3><ul><li>定量估算各种方案的存储空间、存取时间和维护代价入手，对估算结果进行权衡、比较，选择出一个较优的合理的物理结构</li></ul><h2 id="数据库的实施"><a href="#数据库的实施" class="headerlink" title="数据库的实施"></a>数据库的实施</h2><h2 id="数据库的运行与维护"><a href="#数据库的运行与维护" class="headerlink" title="数据库的运行与维护"></a>数据库的运行与维护</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据库设计简介&quot;&gt;&lt;a href=&quot;#数据库设计简介&quot; class=&quot;headerlink&quot; title=&quot;数据库设计简介&quot;&gt;&lt;/a&gt;数据库设计简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;六个阶段&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统需求分析
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>[PHP]-namespace</title>
    <link href="http://yoursite.com/2019/03/31/php-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    <id>http://yoursite.com/2019/03/31/php-命名空间/</id>
    <published>2019-03-31T10:31:53.000Z</published>
    <updated>2019-04-23T10:30:40.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命名空间概述"><a href="#命名空间概述" class="headerlink" title="命名空间概述"></a>命名空间概述</h2><h3 id="什么是命名空间"><a href="#什么是命名空间" class="headerlink" title="什么是命名空间"></a>什么是命名空间</h3><ul><li>概念: 一种封装事物的方法.例如: 函数,类,方法</li><li>作用: 解决类名或者应用程序名冲突问题<ul><li>第三方类加载后可能与项目中的类名冲突.</li></ul></li><li>命名空间是虚拟空间,由 \ 分割空间路径</li></ul><h2 id="定义命名空间的要求"><a href="#定义命名空间的要求" class="headerlink" title="定义命名空间的要求"></a>定义命名空间的要求</h2><ul><li>namespace 空间名</li><li>所有代码均可存在, 仅有三种代码 类, 常量(const), 函数受空间影响</li><li>PHP脚本的第一行,不可有空格等(注释不算)</li></ul><h3 id="定义子命名空间"><a href="#定义子命名空间" class="headerlink" title="定义子命名空间"></a>定义子命名空间</h3><ul><li>举例: APP\Home\Controller</li><li>不建议一个文件有多个空间</li></ul><h4 id="简单组合法"><a href="#简单组合法" class="headerlink" title="简单组合法"></a>简单组合法</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">APP</span>\<span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name = <span class="string">"李瑞恒"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"我的名字:&#123;$this-&gt;name&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">APP</span>\<span class="title">Home</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name = <span class="string">"库里"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;我的名字:&#123;$this-&gt;name&#125;&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="大括号语法"><a href="#大括号语法" class="headerlink" title="大括号语法"></a>大括号语法</h4><ul><li>要加大括号,所有空间都必须加.</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">APP</span>\<span class="title">Home</span>\<span class="title">Controller</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Student</span>&#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">name</span> = "李瑞恒";</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"我的名字:&#123;$this-&gt;name&#125;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">APP</span>\<span class="title">Home</span>\<span class="title">Model</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Student</span>&#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">name</span> = "库里";</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;br&gt;我的名字:&#123;$this-&gt;name&#125;&lt;br&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不包含在命名空间中的代码"><a href="#不包含在命名空间中的代码" class="headerlink" title="不包含在命名空间中的代码"></a>不包含在命名空间中的代码</h4><blockquote><p>如何用大括号定义多个命名空间,且要实现全局代码不加到空间中?可以声明匿名空间!</p></blockquote><h5 id="声明匿名空间-全局空间-根空间"><a href="#声明匿名空间-全局空间-根空间" class="headerlink" title="声明匿名空间(全局空间,根空间)"></a>声明匿名空间(全局空间,根空间)</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Teacher</span>&#123;</span><br><span class="line">        <span class="title">public</span> <span class="title">function</span> <span class="title">__construct</span>($<span class="title">name</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="title">echo</span> "&lt;<span class="title">br</span>&gt;我的名字:&#123;$<span class="title">name</span>&#125;&lt;<span class="title">br</span>&gt;";</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用命名空间"><a href="#使用命名空间" class="headerlink" title="使用命名空间"></a>使用命名空间</h2><ul><li>非限定访问(当前目录)</li><li>限定访问(相对路径)</li><li>完全限定访问(从根目录开始找)</li></ul><h2 id="namespace和NAMESPACE"><a href="#namespace和NAMESPACE" class="headerlink" title="namespace和NAMESPACE"></a>namespace和<strong>NAMESPACE</strong></h2><h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><ul><li>声明空间关键字</li><li>直接代替当前代码空间,相当于self关键字</li></ul><h3 id="NAMESPACE"><a href="#NAMESPACE" class="headerlink" title="__NAMESPACE__"></a>__NAMESPACE__</h3><ul><li>获取当前命名空间的字符串</li></ul><h2 id="命名空间的导入"><a href="#命名空间的导入" class="headerlink" title="命名空间的导入"></a>命名空间的导入</h2><ul><li>导入空间的类,常量函数不能导入</li><li>use App\Home\Controller\Student,默认类名为Student</li><li>use App\Home\Controller,默认空间别名为Controller</li><li>使用 as<ul><li>给空间起别名: use App\Home\Controller as Controller</li><li>给空间的类起别名: use App\Home\Controller\Student as Student2</li></ul></li></ul><h2 id="命名空间在项目中的使用"><a href="#命名空间在项目中的使用" class="headerlink" title="命名空间在项目中的使用"></a>命名空间在项目中的使用</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将带空间的类名转化为真实的类文件路径</span></span><br><span class="line"><span class="comment">//传递过来的类名: \Frame\Libs\Db</span></span><br><span class="line"><span class="comment">//类文件的真实路径: /Frame/Libs/Db.class.php</span></span><br><span class="line"></span><br><span class="line">$filename = <span class="string">"./"</span>.str_replace(<span class="string">'\\'</span>,<span class="string">'/'</span>,$className).<span class="string">".class.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果类文件存在,则包含</span></span><br><span class="line"><span class="keyword">if</span>(file_exists($filename))  <span class="keyword">require_once</span>($filename);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命名空间概述&quot;&gt;&lt;a href=&quot;#命名空间概述&quot; class=&quot;headerlink&quot; title=&quot;命名空间概述&quot;&gt;&lt;/a&gt;命名空间概述&lt;/h2&gt;&lt;h3 id=&quot;什么是命名空间&quot;&gt;&lt;a href=&quot;#什么是命名空间&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>[Smarty]-简单用法</title>
    <link href="http://yoursite.com/2019/03/30/mvc-smarty/"/>
    <id>http://yoursite.com/2019/03/30/mvc-smarty/</id>
    <published>2019-03-30T09:37:59.000Z</published>
    <updated>2019-04-23T09:17:30.806Z</updated>
    
    <content type="html"><![CDATA[<p>如何分离代码?</p><ul><li>前端人员: {$name}</li><li>PHP只能解释的代码:</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $name<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过查找替换</li></ul><h3 id="常用PHP模板"><a href="#常用PHP模板" class="headerlink" title="常用PHP模板"></a>常用PHP模板</h3><p>smarty : PHP模板引擎的祖师,其他模板都是它的二次开发.</p><h3 id="smarty初始化"><a href="#smarty初始化" class="headerlink" title="smarty初始化"></a>smarty初始化</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.包含smarty类文件</span></span><br><span class="line">    <span class="keyword">require</span>(<span class="string">"../smarty-3.1.33/libs/Smarty.class.php"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建Smarty类对象</span></span><br><span class="line">    $smarty = <span class="keyword">new</span> Smarty();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.Smarty配置</span></span><br><span class="line">    $smarty-&gt;left_delimiter=<span class="string">"&lt;&#123;"</span>;</span><br><span class="line">    $smarty-&gt;right_delimiter=<span class="string">"&#125;&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.向视图文件赋值</span></span><br><span class="line">    $smarty-&gt;assign(<span class="string">"name"</span>,<span class="string">"李白"</span>);</span><br><span class="line">    $smarty-&gt;assign(<span class="string">'age'</span>,<span class="number">22</span>);</span><br></pre></td></tr></table></figure><h3 id="smarty的配置"><a href="#smarty的配置" class="headerlink" title="smarty的配置"></a>smarty的配置</h3><ul><li><p>左右定界符</p><ul><li><code>$smarty-&gt;left_delimiter=&quot;&lt;{&quot;;</code></li><li><code>$smarty-&gt;right_delimiter=&quot;}&gt;&quot;;</code></li></ul></li><li><p>smarty常用目录配置</p><ul><li>设置或读取视图文件目录<ul><li>$smarty-&gt;setTemplateDir(“../App/Home/View”);</li><li>$smarty-&gt;getTemplateDir()</li></ul></li><li>其他目录的读取或设置</li></ul></li></ul><h3 id="smarty中的变量"><a href="#smarty中的变量" class="headerlink" title="smarty中的变量"></a>smarty中的变量</h3><h4 id="普通变量"><a href="#普通变量" class="headerlink" title="普通变量"></a>普通变量</h4><ul><li>所有的PHP变量都可传到视图文件</li><li>对象和资源变量不常用</li></ul><h4 id="保留变量"><a href="#保留变量" class="headerlink" title="保留变量"></a>保留变量</h4><blockquote><p>访问请求页面的变量<br></p></blockquote><ul><li>所有的超全局数组变量,可以在视图直接使用<ul><li>{$smarty.get.parm}</li><li>{$smarty.post.parm}</li><li>{$smarty.request.parm}</li><li>{$smarty.server.parm}</li><li>{$smarty.session.parm}</li><li>{$smarty.cookie.parm}</li><li>{$smarty.files.parm}</li></ul></li></ul><blockquote><p>时间戳</p></blockquote><ul><li><code>{$smarty.now|date_format:}</code></li></ul><blockquote><p>配置变量</p></blockquote><p>前端人员在.conf配置的变量,可以分组.</p><ul><li>.conf文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[cn]</span><br><span class="line">author = 李瑞恒</span><br><span class="line">sex = 男</span><br><span class="line">[en]</span><br><span class="line">author = henry</span><br><span class="line">sex = male</span><br></pre></td></tr></table></figure><ul><li>controller.php</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$smarty-&gt;setConfigDir(<span class="string">"../App/Conf"</span>);</span><br></pre></td></tr></table></figure><ul><li>view.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">&#123;config_load</span> <span class="attr">file</span>=<span class="string">"myConfig.conf"</span><span class="attr">section</span>=<span class="string">$smarty.get.lan&#125;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 读取分组配置文件参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">&#123;#author#&#125;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">&#123;$smarty.config.sex&#125;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="smarty中的循环-foreach"><a href="#smarty中的循环-foreach" class="headerlink" title="smarty中的循环-foreach"></a>smarty中的循环-foreach</h3><ul><li>foreach遍历一维数组</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">&#123;foreach</span> $<span class="attr">arr</span> <span class="attr">as</span> $<span class="attr">key</span>=&gt;</span>$value&#125;&gt;</span><br><span class="line">  <span class="comment">&lt;!-- 循环的内容   --&gt;</span></span><br><span class="line">  $arr[<span class="tag">&lt;<span class="name">&#123;$key&#125;</span>&gt;</span>] =<span class="tag">&lt;<span class="name">&#123;$value&#125;</span>&gt;</span>;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">&#123;</span>/<span class="attr">foreach</span>&#125;&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 描述性写法 --&gt;</span></span><br><span class="line">&#123;foreach from='' key='' item=''&#125;</span><br><span class="line"></span><br><span class="line">&#123;/foreach&#125;</span><br></pre></td></tr></table></figure><ul><li>foreach遍历二维数组</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">'300'</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">&#123;foreach</span> $<span class="attr">arrs</span> <span class="attr">as</span> $<span class="attr">arr</span>&#125;&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">&#123;foreach</span> $<span class="attr">arr</span> <span class="attr">as</span> $<span class="attr">value</span>&#125;&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">&#123;$value&#125;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">&#123;</span>/<span class="attr">foreach</span>&#125;&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">&#123;</span>/<span class="attr">foreach</span>&#125;&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>foreach的常用属性<ul><li><code>&lt;{$value}&gt;</code> 元素的值</li><li><code>&lt;{$value@key}&gt;</code> 元素下标</li><li><code>&lt;{$value@index}&gt;</code>  从0开始计数</li><li><code>&lt;{$value@iteration}&gt;</code>  从1开始计数</li><li><code>&lt;{$value@first}&gt;</code>  是否第1次循环</li><li><code>&lt;{$value@last}&gt;</code>   是否最后1次循环</li><li><code>&lt;{$value@total}&gt;</code>  循环总数</li></ul></li></ul><h3 id="smarty中的循环-section"><a href="#smarty中的循环-section" class="headerlink" title="smarty中的循环-section"></a>smarty中的循环-section</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;section name='' loop='' start='' step='' max=''&#125;</span><br><span class="line">&#123;/section&#125;</span><br><span class="line"><span class="comment">&lt;!-- 用法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">&#123;section</span> <span class="attr">name</span>=<span class="string">i</span> <span class="attr">loop</span>=<span class="string">$arr&#125;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">&#123;$arr[i]&#125;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">&#123;</span>/<span class="attr">section</span>&#125;&gt;</span></span><br></pre></td></tr></table></figure><ul><li>语法说明<ol><li>name:循环索引(必须)</li><li>loop:循环数组(必须)</li><li>start:初始索引</li><li>step:循环增长值</li><li>max:最大循环次数</li></ol></li></ul><h3 id="smarty中的判断语句-if语句"><a href="#smarty中的判断语句-if语句" class="headerlink" title="smarty中的判断语句-if语句"></a>smarty中的判断语句-if语句</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;if 条件1&#125;</span><br><span class="line">    //code</span><br><span class="line">&#123;elseif 条件2&#125;</span><br><span class="line">    //code</span><br><span class="line">&#123;else&#125;</span><br><span class="line">    //code</span><br><span class="line">&#123;/if&#125;</span><br></pre></td></tr></table></figure><h3 id="smarty中的变量调节器"><a href="#smarty中的变量调节器" class="headerlink" title="smarty中的变量调节器"></a>smarty中的变量调节器</h3><ul><li>语法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;$var|调节器1:参数1:参数2:参数n|调节器2|...&#125;</span><br></pre></td></tr></table></figure><ul><li><p>语法说明</p><ul><li><code></code>$var` 要修饰的变量</li><li>|  分割调节器函数</li><li>:  分割调节器函数的参数</li></ul></li><li><p>PHP查找替换:str_replace(目标,结果,原始变量)</p><ul><li><code>{str_replace(&#39;Itcast&#39;,&#39;传智播客&#39;,$title)}</code></li></ul></li><li><p>smarty变量调节器替换</p><ul><li>{$title|replace:’Itcast’:’传智播客’}</li></ul></li></ul><h4 id="常用变量调节器"><a href="#常用变量调节器" class="headerlink" title="常用变量调节器"></a>常用变量调节器</h4><ul><li>date_format</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当前时间戳:<span class="tag">&lt;<span class="name">&#123;time()&#125;</span>&gt;</span></span><br><span class="line">当前时间戳:<span class="tag">&lt;<span class="name">&#123;$smarty.now&#125;</span>&gt;</span></span><br><span class="line">格式化时间戳:<span class="tag">&lt;<span class="name">&#123;date(</span> '<span class="attr">Y-m-d</span> <span class="attr">H:i:s</span>',<span class="attr">time</span>())&#125;&gt;</span></span><br><span class="line">格式化时间戳: <span class="tag">&lt;<span class="name">&#123;$smarty.now|date_format:</span> '%<span class="attr">Y-</span>%<span class="attr">m-</span>%<span class="attr">d</span> %<span class="attr">H:</span>%<span class="attr">M:</span>%<span class="attr">S</span>'&#125;&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如何分离代码?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端人员: {$name}&lt;/li&gt;
&lt;li&gt;PHP只能解释的代码:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="SMARTY" scheme="http://yoursite.com/tags/SMARTY/"/>
    
  </entry>
  
  <entry>
    <title>[PHP]-PDO</title>
    <link href="http://yoursite.com/2019/03/30/php-pdo/"/>
    <id>http://yoursite.com/2019/03/30/php-pdo/</id>
    <published>2019-03-30T02:05:16.000Z</published>
    <updated>2019-04-23T10:29:22.841Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PDO简介"><a href="#PDO简介" class="headerlink" title="PDO简介"></a>PDO简介</h3><ul><li>PDO: php data object</li><li>主要功能: 代替数据库操作类<br></li></ul><h4 id="PDO连接mysql"><a href="#PDO连接mysql" class="headerlink" title="PDO连接mysql"></a>PDO连接mysql</h4><ul><li>语法:</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PDO::_construct(string $dsn[,string $username[,string $password]])</span><br><span class="line"></span><br><span class="line">$dsn = <span class="string">"mysql:host=127.0.0.1;port=3306;dbname=pdo_test"</span>;</span><br><span class="line">$username = <span class="string">'root'</span>;</span><br><span class="line">$password = <span class="string">"root"</span>;</span><br><span class="line"></span><br><span class="line">$pdo = <span class="keyword">new</span> PDO($dsn, $username, $password);</span><br></pre></td></tr></table></figure><ol><li><p>PDO常用方法</p><ol><li>exec() 执行一条sql语句,返回受影响的行数  </li><li>query() 执行select,show语句,并返回一个结果集对象(PDOStatement)</li><li>lastInsertId() 获取插入的记录的ID值</li><li>setAttribute() 设置属性<br><br> <code>语法:bool PDO::setAttribute(int $attribute,mixed $value)</code></li></ol></li><li><p>PDOStatement结果集对象常用方法:</p><ol><li>fetch() 获取结果集的一条记录,指针自动跳转<br><br><code>mixed  PDOStatement::fetch([int $fetch_style])</code>  </li><li>fetchAll() 获取结果集的多条记录</li><li>fetchColumn() 返回结果集的单独一列,默认为0</li><li>rowCount() 返回受上一个sql语句影响的行数</li><li><p>常用foreach遍历</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>($PDOStatement <span class="keyword">as</span> $arr)&#123;</span><br><span class="line">    print_r($arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="PDO错误处理模式"><a href="#PDO错误处理模式" class="headerlink" title="PDO错误处理模式"></a>PDO错误处理模式</h4><ul><li><p>错误处理概述</p><ul><li>静默模式:不显示任何错误(默认)</li><li>警告模式:用PHP的错误等级来报告信息</li><li>异常模式:先抛出异常,再处理异常</li></ul></li><li><p>静默模式<br>  获取错误信息函数<br></p><ol><li>PDO:errorCode(); 获取状态错误码.[00000]正常</li><li>PDO:errorInfo(); 获取错误信息</li></ol></li><li>警告模式<ul><li>必须先设置错误报告模式(在网页直接显示错误或者警告信息)<br><br>  <code>$pdo-&gt;setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_WARNING);</code></li></ul></li><li>异常模式</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$pdo-&gt;setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//要执行的sql语句</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(PDOException $e)&#123;</span><br><span class="line">    ehco <span class="string">"错误行号:"</span>.$e-&gt;getLine();</span><br><span class="line">    ehco <span class="string">"&lt;br&gt;错误文件:"</span>.$e-&gt;getFile();</span><br><span class="line">    ehco <span class="string">"&lt;br&gt;错误状态码:"</span>.$e-&gt;getCode();</span><br><span class="line">    ehco <span class="string">"&lt;br&gt;错误信息:"</span>.$e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PDO预处理模式"><a href="#PDO预处理模式" class="headerlink" title="PDO预处理模式"></a>PDO预处理模式</h4><ul><li>sql语句的执行(编译和执行)</li><li>如果是第一次执行,先编译后执行,切编译过程非常复杂</li><li>如果是第二次执行(相同sql语句),直接从缓存中读取,效率高,安全,有效防止sql语句注入.</li></ul><h5 id="预处理步骤"><a href="#预处理步骤" class="headerlink" title="预处理步骤"></a>预处理步骤</h5><ul><li>先提取相同结构语句</li><li>编译结构,保存结果</li><li>再将不同数据部分替换</li><li>执行预处理语句</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(1)使用占位符":value"来代替真正的数据</span></span><br><span class="line"> $sql = <span class="string">"INSERT INTO user(username,password) VALUES(:username,:password)"</span>;</span><br><span class="line"> $sql = <span class="string">"INSERT INTO user(username,password) VALUES(?,?)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(2)预编译相同结构的sql语句,返回结果集对象</span></span><br><span class="line">$PDOStatement = $pdo-&gt;prepare($sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//(3)给占位符绑定真正的数据</span></span><br><span class="line">$PDOStatement-&gt;bindValue(<span class="string">":username"</span>,<span class="string">"henry"</span>);</span><br><span class="line">$PDOStatement-&gt;bindValue(<span class="string">":password"</span>,<span class="string">"566"</span>);</span><br><span class="line">$PDOStatement-&gt;bindValue(<span class="string">"1"</span>,<span class="string">"henry"</span>);</span><br><span class="line">$PDOStatement-&gt;bindValue(<span class="string">"2"</span>,<span class="string">"566"</span>);</span><br><span class="line"><span class="comment">//(4)执行预编译sql语句</span></span><br><span class="line">$PDOStatement-&gt;execute();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;PDO简介&quot;&gt;&lt;a href=&quot;#PDO简介&quot; class=&quot;headerlink&quot; title=&quot;PDO简介&quot;&gt;&lt;/a&gt;PDO简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;PDO: php data object&lt;/li&gt;
&lt;li&gt;主要功能: 代替数据库操作类&lt;br&gt;&lt;/li
      
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>[CSS]-高度坍塌问题</title>
    <link href="http://yoursite.com/2019/03/29/CSS-%E9%AB%98%E5%BA%A6%E5%9D%8D%E5%A1%8C%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/03/29/CSS-高度坍塌问题/</id>
    <published>2019-03-29T11:44:01.000Z</published>
    <updated>2019-04-23T09:05:06.558Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浮动塌陷"><a href="#浮动塌陷" class="headerlink" title="浮动塌陷"></a>浮动塌陷</h3><p>如果父元素只包含浮动元素,且未设置高度,那么它的高度将坍塌为0.因为浮动元素脱离了文档流,包含他们的父块没有内容,发生塌陷.</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>使用clear属性的空元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear:both"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用css的overflow属性<br>  给浮动元素的容器添加:</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">overflow:hidden||auto;</span><br></pre></td></tr></table></figure><ul><li><p>给浮动元素的容器添加浮动</p></li><li><p>使用css的:after伪元素(推荐使用)</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.cf:after &#123;</span><br><span class="line">    clear: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;浮动塌陷&quot;&gt;&lt;a href=&quot;#浮动塌陷&quot; class=&quot;headerlink&quot; title=&quot;浮动塌陷&quot;&gt;&lt;/a&gt;浮动塌陷&lt;/h3&gt;&lt;p&gt;如果父元素只包含浮动元素,且未设置高度,那么它的高度将坍塌为0.因为浮动元素脱离了文档流,包含他们的父块没有内容,发生塌陷.
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>[ES6]-let&amp;const</title>
    <link href="http://yoursite.com/2019/03/29/ES6-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/29/ES6-基础语法/</id>
    <published>2019-03-29T10:44:01.000Z</published>
    <updated>2019-04-23T09:03:46.694Z</updated>
    
    <content type="html"><![CDATA[<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ol><li><p>let类似于var,但是声明的变量只在该代码块有效</p></li><li><p>不存在变量提升</p></li><li><p>暂时性死区</p><blockquote><p>使用let声明变量之前,该变量不可使用</p></blockquote></li><li><p>不允许重复声明</p></li></ol><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><ul><li>块级作用域的出现取代了立即执行函数.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IIFE 写法</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tmp = ...;</span><br><span class="line">  ...</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 块级作用域写法</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> tmp = ...;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>块级作用域可以多层嵌套</li><li>不建议在块级作用域声明函数,如果需要,也应该使用函数表达式</li></ul><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ol><li><p><code>const</code>声明一个只读的常量,一旦声明,无法改变.<br><br>因此声明的同时必须立即赋值.</p></li><li><p>存在暂时性死区</p></li><li><p>不可重复声明</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;let&quot;&gt;&lt;a href=&quot;#let&quot; class=&quot;headerlink&quot; title=&quot;let&quot;&gt;&lt;/a&gt;let&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;let类似于var,但是声明的变量只在该代码块有效&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不存在变量提升&lt;/p&gt;
&lt;/
      
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
</feed>
